<!DOCTYPE html>
<!-- saved from url=(0051)http://alimanfoo.github.io/2017/06/14/read-vcf.html -->
<html class="gr__alimanfoo_github_io"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta name="viewport" content="width=device-width initial-scale=1">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <title>Extracting data from VCF files</title>
    <meta name="description" content="">

    <link rel="stylesheet" href="./Extracting data from VCF files_files/main.css">
    <link rel="canonical" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html">
    <link rel="stylesheet" href="./Extracting data from VCF files_files/font-awesome.min.css">
    <script src="./Extracting data from VCF files_files/require.js"></script>
<script type="text/javascript" async="" src="./Extracting data from VCF files_files/embed.js"></script><script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="jstree" src="./Extracting data from VCF files_files/jstree.min.js"></script><link rel="prefetch" as="style" href="https://c.disquscdn.com/next/embed/styles/lounge.91c71242b4acaa0ee7f9db125ef21f90.css"><link rel="prefetch" as="script" href="https://c.disquscdn.com/next/embed/common.bundle.b3d69807fc8989b3511a4e0bb0652899.js"><link rel="prefetch" as="script" href="https://c.disquscdn.com/next/embed/lounge.bundle.fbe002d55ac2095d1bcbb01ee61979b6.js"><link rel="prefetch" as="script" href="https://disqus.com/next/config.js"><script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="jquery" src="./Extracting data from VCF files_files/jquery.min.js"></script></head>


  <body data-gr-c-s-loaded="true">

    <header class="site-header">

  <div class="wrapper">

    <a class="site-title" href="http://alimanfoo.github.io/">Alistair Miles</a>

    <nav class="site-nav">
      <a href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" class="menu-icon">
        <svg viewBox="0 0 18 15">
          <path fill="#424242" d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.031C17.335,0,18,0.665,18,1.484L18,1.484z"></path>
          <path fill="#424242" d="M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0c0-0.82,0.665-1.484,1.484-1.484 h15.031C17.335,6.031,18,6.696,18,7.516L18,7.516z"></path>
          <path fill="#424242" d="M18,13.516C18,14.335,17.335,15,16.516,15H1.484C0.665,15,0,14.335,0,13.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.031C17.335,12.031,18,12.696,18,13.516L18,13.516z"></path>
        </svg>
      </a>

      <div class="trigger">
          <a class="page-link" href="http://alimanfoo.github.io/about/">About</a>
          <a class="page-link" href="http://alimanfoo.github.io/slides/">Slides</a>
      </div>
    </nav>

  </div>

</header>


    <div class="page-content">
      <div class="wrapper">
        <div class="post">

  <header class="post-header">
    <h1 class="post-title">Extracting data from VCF files</h1>
    <p class="post-meta">Jun 14, 2017</p>
  </header>

  <article class="post-content">
    <p><em>This post gives an introduction to functions for extracting data from <a href="https://samtools.github.io/hts-specs/VCFv4.3.pdf">Variant Call Format (VCF)</a> files and loading into <a href="http://www.numpy.org/">NumPy</a> arrays, <a href="http://pandas.pydata.org/">pandas</a> data frames, <a href="https://support.hdfgroup.org/HDF5/">HDF5</a> files or <a href="http://zarr.readthedocs.io/">Zarr</a> arrays for ease of analysis. These functions are available in <a href="http://scikit-allel.readthedocs.io/en/latest/">scikit-allel</a> version 1.1 or later. Any feedback or bug reports welcome.</em></p>

<p><em>Update 2018-10-12: This post has been updated to use scikit-allel 1.1.10 and zarr 2.2, and adds examples of how to store data grouped by chromosome.</em></p>

<h2 id="introduction">Introduction</h2>

<h3 id="variant-call-format-vcf">Variant Call Format (VCF)</h3>

<p>VCF is a widely-used file format for genetic variation data. Here is an example of a small VCF file, based on the example given in the <a href="https://samtools.github.io/hts-specs/VCFv4.3.pdf">VCF specification</a>:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="n">vcf</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">vcf</span><span class="o">.</span><span class="n">read</span><span class="p">())</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##fileformat=VCFv4.3
##reference=file:///seq/references/1000GenomesPilot-NCBI36.fasta
##contig=&lt;ID=20,length=62435964,assembly=B36,md5=f126cdf8a6e0c7f379d618ff66beb2da,species="Homo sapiens",taxonomy=x&gt;
##INFO=&lt;ID=DP,Number=1,Type=Integer,Description="Total Depth"&gt;
##INFO=&lt;ID=AF,Number=A,Type=Float,Description="Allele Frequency"&gt;
##INFO=&lt;ID=DB,Number=0,Type=Flag,Description="dbSNP membership, build 129"&gt;
##FILTER=&lt;ID=q10,Description="Quality below 10"&gt;
##FILTER=&lt;ID=s50,Description="Less than 50% of samples have data"&gt;
##FORMAT=&lt;ID=GT,Number=1,Type=String,Description="Genotype"&gt;
##FORMAT=&lt;ID=DP,Number=1,Type=Integer,Description="Read Depth"&gt;
#CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	NA00001	NA00002	NA00003
20	14370	rs6054257	G	A	29	PASS	DP=14;AF=0.5;DB	GT:DP	0/0:1	0/1:8	1/1:5
20	17330	.	T	A	3	q10	DP=11;AF=0.017	GT:DP	0/0:3	0/1:5	0/0:41
20	1110696	rs6040355	A	G,T	67	PASS	DP=10;AF=0.333,0.667;DB	GT:DP	0/2:6	1/2:0	2/2:4
20	1230237	.	T	.	47	PASS	DP=13	GT:DP	0/0:7	0/0:4	./.:.
20	1234567	microsat1	GTC	G,GTCT	50	PASS	DP=9	GT:DP	0/1:4	0/2:2	1/1:3
</code></pre></div></div>

<p>A VCF file begins with a number of meta-information lines, which start with two hash (‘##’) characters. Then there is a single header line beginning with a single hash (‘#’) character. After the header line there are data lines, with each data line describing a genetic variant at a particular position relative to the reference genome of whichever species you are studying. Each data line is divided into fields separated by tab characters. There are 9 fixed fields, labelled “CHROM”, “POS”, “ID”, “REF”, “ALT”, “QUAL”, “FILTER”, “INFO” and “FORMAT”. Following these are fields containing data about samples, which usually contain a genotype call for each sample plus some associated data.</p>

<p>For example, the first data line in the file above describes a variant on chromosome 20 at position 14370 relative to the B36 assembly of the human genome. The reference allele is ‘G’ and the alternate allele is ‘A’, so this is a single nucleotide polymorphism (SNP). In this file there are three fields with data about samples labelled ‘NA00001’, ‘NA00002’ and ‘NA00003’. The genotype call in the first sample is ‘0/0’, meaning that individual ‘NA0001’ is homozygous for the reference allele at this position. The genotype call for the second sample is ‘0/1’ (you may need to scroll across to see this), which means that individual ‘NA00002’ is heterozygous for the reference and alternate alleles at this position.</p>

<h3 id="numpy-pandas-hdf5-zarr-">NumPy, pandas, HDF5, Zarr, …</h3>

<p>There are a number of software tools that can read VCF files and perform various analyses. However, if your dataset is large and/or you need to do some bespoke analysis, then it can be faster and more convenient to first extract the necessary data from the VCF file and load into a more efficient storage container.</p>

<p>For analysis and plotting of numerical data in Python, it is very convenient to load data into <a href="https://docs.scipy.org/doc/numpy-dev/user/quickstart.html">NumPy arrays</a>. A NumPy array is an in-memory data structure that provides support for fast arithmetic and data manipulation. For analysing tables of data, <a href="https://pandas.pydata.org/pandas-docs/stable/dsintro.html">pandas DataFrames</a> provide useful features such as querying, aggregation and joins. When data are too large to fit into main memory, <a href="http://docs.h5py.org/en/latest/quick.html">HDF5 files</a> and <a href="http://zarr.readthedocs.io/en/latest/tutorial.html">Zarr arrays</a> can provide fast on-disk storage and retrieval of numerical arrays.</p>

<p><a href="http://scikit-allel.readthedocs.io/en/latest/">scikit-allel</a> is a Python package intended to enable exploratory analysis of large-scale genetic variation data. Version 1.1.0 of scikit-allel adds some new functions for extracting data from VCF files and loading the data into NumPy arrays, pandas DataFrames or HDF5 files. Once you have extracted these data, there are many analyses that can be run interactively on a commodity laptop or desktop computer, even with large-scale datasets from population resequencing studies. To give a flavour of what analyses can be done, there are a few previous articles on my blog, touching on topics including <a href="http://alimanfoo.github.io/2016/06/10/scikit-allel-tour.html">variant and sample QC</a>, <a href="http://alimanfoo.github.io/2015/09/21/estimating-fst.html">allele frequency differentiation</a>, <a href="http://alimanfoo.github.io/2015/09/28/fast-pca.html">population structure</a>, and <a href="http://alimanfoo.github.io/2017/02/14/mendelian-transmission.html">genetic crosses</a>.</p>

<p>Until now, getting data out of VCF files and into NumPy etc. has been a bit of a pain point. Hopefully the new scikit-allel functions will make this a bit less of a hurdle. Let’s take a look at the new functions…</p>

<h2 id="read_vcf"><a href="http://scikit-allel.readthedocs.io/en/latest/io.html#allel.read_vcf"><code class="highlighter-rouge">read_vcf()</code></a></h2>

<p>Let’s start with the scikit-allel function <a href="http://scikit-allel.readthedocs.io/en/latest/io.html#allel.read_vcf"><code class="highlighter-rouge">read_vcf()</code></a>. First, some imports:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c"># import scikit-allel</span>
<span class="kn">import</span> <span class="nn">allel</span>
<span class="c"># check which version is installed</span>
<span class="k">print</span><span class="p">(</span><span class="n">allel</span><span class="o">.</span><span class="n">__version__</span><span class="p">)</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1.1.10
</code></pre></div></div>

<p>Read the example VCF file shown above, using default parameters:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">read_vcf</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">)</span></code></pre></figure>

<p>The <code class="highlighter-rouge">callset</code> object returned by <code class="highlighter-rouge">read_vcf()</code> is a Python dictionary (<code class="highlighter-rouge">dict</code>). It contains several NumPy arrays, each of which can be accessed via a key. Here are the available keys:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="nb">sorted</span><span class="p">(</span><span class="n">callset</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>['calldata/GT',
 'samples',
 'variants/ALT',
 'variants/CHROM',
 'variants/FILTER_PASS',
 'variants/ID',
 'variants/POS',
 'variants/QUAL',
 'variants/REF']
</code></pre></div></div>

<p>The ‘samples’ array contains sample identifiers extracted from the header line in the VCF file.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span><span class="p">[</span><span class="s">'samples'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array(['NA00001', 'NA00002', 'NA00003'], dtype=object)
</code></pre></div></div>

<p>All arrays with keys beginning ‘variants/’ come from the fixed fields in the VCF file. For example, here is the data from the ‘CHROM’ field:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span><span class="p">[</span><span class="s">'variants/CHROM'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array(['20', '20', '20', '20', '20'], dtype=object)
</code></pre></div></div>

<p>Here is the data from the ‘POS’ field:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span><span class="p">[</span><span class="s">'variants/POS'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([  14370,   17330, 1110696, 1230237, 1234567], dtype=int32)
</code></pre></div></div>

<p>Here is the data from the ‘QUAL’ field:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span><span class="p">[</span><span class="s">'variants/QUAL'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([ 29.,   3.,  67.,  47.,  50.], dtype=float32)
</code></pre></div></div>

<p>All arrays with keys beginning ‘calldata/’ come from the sample fields in the VCF file. For example, here are the actual genotype calls from the ‘GT’ field:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span><span class="p">[</span><span class="s">'calldata/GT'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([[[ 0,  0],
        [ 0,  1],
        [ 1,  1]],

       [[ 0,  0],
        [ 0,  1],
        [ 0,  0]],

       [[ 0,  2],
        [ 1,  2],
        [ 2,  2]],

       [[ 0,  0],
        [ 0,  0],
        [-1, -1]],

       [[ 0,  1],
        [ 0,  2],
        [ 1,  1]]], dtype=int8)
</code></pre></div></div>

<p>Note the -1 values for one of the genotype calls. By default scikit-allel uses -1 to indicate a missing value for any array with a signed integer data type (although you can change this if you want).</p>

<h3 id="aside-genotype-arrays">Aside: genotype arrays</h3>

<p>Because working with genotype calls is a very common task, scikit-allel has a <a href="http://scikit-allel.readthedocs.io/en/latest/model/ndarray.html#allel.model.ndarray.GenotypeArray"><code class="highlighter-rouge">GenotypeArray</code></a> class which adds some convenient functionality to an array of genotype calls. To use this class, pass the raw NumPy array into the <code class="highlighter-rouge">GenotypeArray</code> class constructor, e.g.:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">gt</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">GenotypeArray</span><span class="p">(</span><span class="n">callset</span><span class="p">[</span><span class="s">'calldata/GT'</span><span class="p">])</span>
<span class="n">gt</span></code></pre></figure>

<div class="allel allel-DisplayAs2D"><span>&lt;GenotypeArray shape=(5, 3, 2) dtype=int8&gt;</span><table><thead><tr><th></th><th style="text-align: center">0</th><th style="text-align: center">1</th><th style="text-align: center">2</th></tr></thead><tbody><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">0</th><td style="text-align: center">0/0</td><td style="text-align: center">0/1</td><td style="text-align: center">1/1</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">1</th><td style="text-align: center">0/0</td><td style="text-align: center">0/1</td><td style="text-align: center">0/0</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">2</th><td style="text-align: center">0/2</td><td style="text-align: center">1/2</td><td style="text-align: center">2/2</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">3</th><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">./.</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">4</th><td style="text-align: center">0/1</td><td style="text-align: center">0/2</td><td style="text-align: center">1/1</td></tr></tbody></table></div>

<p>One of the things that the <code class="highlighter-rouge">GenotypeArray</code> class does is provide a slightly more visually-appealing representation when used in a Jupyter notebook, as can be seen above. There are also methods for making various computations over the genotype calls. For example, the <code class="highlighter-rouge">is_het()</code> method locates all heterozygous genotype calls:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">gt</span><span class="o">.</span><span class="n">is_het</span><span class="p">()</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([[False,  True, False],
       [False,  True, False],
       [ True,  True, False],
       [False, False, False],
       [ True,  True, False]], dtype=bool)
</code></pre></div></div>

<p>To give another example, the <code class="highlighter-rouge">count_het()</code> method will count heterozygous calls, summing over variants (axis=0) or samples (axis=1) if requested. E.g., to count the number of het calls per variant:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">gt</span><span class="o">.</span><span class="n">count_het</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([1, 1, 2, 0, 2])
</code></pre></div></div>

<p>One more example, here is how to perform an allele count, i.e., count the number times each allele (0=reference, 1=first alternate, 2=second alternate, etc.) is observed for each variant:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">ac</span> <span class="o">=</span> <span class="n">gt</span><span class="o">.</span><span class="n">count_alleles</span><span class="p">()</span>
<span class="n">ac</span></code></pre></figure>

<div class="allel allel-DisplayAs2D"><span>&lt;AlleleCountsArray shape=(5, 3) dtype=int32&gt;</span><table><thead><tr><th></th><th style="text-align: center">0</th><th style="text-align: center">1</th><th style="text-align: center">2</th></tr></thead><tbody><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">0</th><td style="text-align: center">3</td><td style="text-align: center">3</td><td style="text-align: center">0</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">1</th><td style="text-align: center">5</td><td style="text-align: center">1</td><td style="text-align: center">0</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">2</th><td style="text-align: center">1</td><td style="text-align: center">1</td><td style="text-align: center">4</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">3</th><td style="text-align: center">4</td><td style="text-align: center">0</td><td style="text-align: center">0</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">4</th><td style="text-align: center">2</td><td style="text-align: center">3</td><td style="text-align: center">1</td></tr></tbody></table></div>

<h3 id="fields">Fields</h3>

<p>VCF files can often contain many fields of data, and you may only need to extract some of them to perform a particular analysis. You can select which fields to extract by passing a list of strings as the <strong>fields</strong> parameter. For example, let’s extract the ‘DP’ field from within the ‘INFO’ field, and let’s also extract the ‘DP’ field from the genotype call data:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">read_vcf</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">,</span> <span class="n">fields</span><span class="o">=</span><span class="p">[</span><span class="s">'variants/DP'</span><span class="p">,</span> <span class="s">'calldata/DP'</span><span class="p">])</span>
<span class="nb">sorted</span><span class="p">(</span><span class="n">callset</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>['calldata/DP', 'variants/DP']
</code></pre></div></div>

<p>Here is the data that we just extracted:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span><span class="p">[</span><span class="s">'variants/DP'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([14, 11, 10, 13,  9], dtype=int32)
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span><span class="p">[</span><span class="s">'calldata/DP'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([[ 1,  8,  5],
       [ 3,  5, 41],
       [ 6,  0,  4],
       [ 7,  4, -1],
       [ 4,  2,  3]], dtype=int16)
</code></pre></div></div>

<p>I chose these two fields to illustrate the point that sometimes the same field name (e.g., ‘DP’) can be used both within the INFO field of a VCF and also within the genotype call data. When selecting fields, to make sure there is no ambiguity, you can include a prefix which is either ‘variants/’ or ‘calldata/’. For example, if you provide ‘variants/DP’, then the <code class="highlighter-rouge">read_vcf()</code> function will look for an INFO field named ‘DP’. If you provide ‘calldata/DP’ then <code class="highlighter-rouge">read_vcf()</code> will look for a FORMAT field named ‘DP’ within the call data.</p>

<p>If you are feeling lazy, you can drop the ‘variants/’ and ‘calldata/’ prefixes, in which case <code class="highlighter-rouge">read_vcf()</code> will assume you mean ‘variants/’ if there is any ambiguity. E.g.:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">read_vcf</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">,</span> <span class="n">fields</span><span class="o">=</span><span class="p">[</span><span class="s">'DP'</span><span class="p">,</span> <span class="s">'GT'</span><span class="p">])</span>
<span class="nb">sorted</span><span class="p">(</span><span class="n">callset</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>['calldata/GT', 'variants/DP']
</code></pre></div></div>

<p>If you want to extract absolutely everything from a VCF file, then you can provide a special value <code class="highlighter-rouge">'*'</code> as the <strong>fields</strong> parameter:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">read_vcf</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">,</span> <span class="n">fields</span><span class="o">=</span><span class="s">'*'</span><span class="p">)</span>
<span class="nb">sorted</span><span class="p">(</span><span class="n">callset</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>['calldata/DP',
 'calldata/GT',
 'samples',
 'variants/AF',
 'variants/ALT',
 'variants/CHROM',
 'variants/DB',
 'variants/DP',
 'variants/FILTER_PASS',
 'variants/FILTER_q10',
 'variants/FILTER_s50',
 'variants/ID',
 'variants/POS',
 'variants/QUAL',
 'variants/REF',
 'variants/is_snp',
 'variants/numalt',
 'variants/svlen']
</code></pre></div></div>

<p>You can also provide the special value <code class="highlighter-rouge">'variants/*'</code> to request all variants fields (including all INFO), and the special value <code class="highlighter-rouge">'calldata/*'</code> to request all call data fields.</p>

<p>If you don’t specify the <strong>fields</strong> parameter, scikit-allel will default to extracting data from the fixed variants fields (but no INFO) and the GT genotype field if present (but no other call data).</p>

<h3 id="types">Types</h3>

<p>NumPy arrays can have various <a href="https://docs.scipy.org/doc/numpy-1.12.0/user/basics.types.html">data types</a>, including signed integers (‘int8’, ‘int16’, ‘int32’, ‘int64’), unsigned integers (‘uint8’, ‘uint16’, ‘uint32’, ‘uint64’), floating point numbers (‘float32’, ‘float64’), variable length strings (‘object’) and fixed length strings (e.g., ‘S4’ for a 4-character ASCII string). scikit-allel will try to choose a sensible default data type for the fields you want to extract, based on the meta-information in the VCF file, but you can override these via the <strong>types</strong> parameter.</p>

<p>For example, by default the ‘DP’ INFO field is loaded into a 32-bit integer array:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">read_vcf</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">,</span> <span class="n">fields</span><span class="o">=</span><span class="p">[</span><span class="s">'DP'</span><span class="p">])</span>
<span class="n">callset</span><span class="p">[</span><span class="s">'variants/DP'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([14, 11, 10, 13,  9], dtype=int32)
</code></pre></div></div>

<p>If you know the maximum value this field is going to contain, to save some memory you could choose a 16-bit integer array instead:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">read_vcf</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">,</span> <span class="n">fields</span><span class="o">=</span><span class="p">[</span><span class="s">'DP'</span><span class="p">],</span> <span class="n">types</span><span class="o">=</span><span class="p">{</span><span class="s">'DP'</span><span class="p">:</span> <span class="s">'int16'</span><span class="p">})</span>
<span class="n">callset</span><span class="p">[</span><span class="s">'variants/DP'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([14, 11, 10, 13,  9], dtype=int16)
</code></pre></div></div>

<p>You can also choose a floating-point data type, even for fields that are declared as type ‘Integer’ in the VCF meta-information, and vice versa. E.g.:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">read_vcf</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">,</span> <span class="n">fields</span><span class="o">=</span><span class="p">[</span><span class="s">'DP'</span><span class="p">],</span> <span class="n">types</span><span class="o">=</span><span class="p">{</span><span class="s">'DP'</span><span class="p">:</span> <span class="s">'float32'</span><span class="p">})</span>
<span class="n">callset</span><span class="p">[</span><span class="s">'variants/DP'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([ 14.,  11.,  10.,  13.,   9.], dtype=float32)
</code></pre></div></div>

<p>For fields containing textual data, there are two choices for data type. By default, scikit-allel will use an ‘object’ data type, which means that values are stored as an array of Python strings. E.g.:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">read_vcf</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">)</span>
<span class="n">callset</span><span class="p">[</span><span class="s">'variants/REF'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array(['G', 'T', 'A', 'T', 'GTC'], dtype=object)
</code></pre></div></div>

<p>The advantage of using ‘object’ dtype is that strings can be of any length. Alternatively, you can use a fixed-length string dtype, e.g.:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">read_vcf</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">,</span> <span class="n">types</span><span class="o">=</span><span class="p">{</span><span class="s">'REF'</span><span class="p">:</span> <span class="s">'S3'</span><span class="p">})</span>
<span class="n">callset</span><span class="p">[</span><span class="s">'variants/REF'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([b'G', b'T', b'A', b'T', b'GTC'],
      dtype='|S3')
</code></pre></div></div>

<p>Note that fixed-length string dtypes will cause any string values longer than the requested number of characters to be truncated. I.e., there can be some data loss. E.g., if using a single-character string for the ‘REF’ field, the correct value of ‘GTC’ for the final variant will get truncated to ‘G’:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">read_vcf</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">,</span> <span class="n">types</span><span class="o">=</span><span class="p">{</span><span class="s">'REF'</span><span class="p">:</span> <span class="s">'S1'</span><span class="p">})</span>
<span class="n">callset</span><span class="p">[</span><span class="s">'variants/REF'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([b'G', b'T', b'A', b'T', b'G'],
      dtype='|S1')
</code></pre></div></div>

<h3 id="numbers">Numbers</h3>

<p>Some fields like ‘ALT’, ‘AC’ and ‘AF’ can have a variable number of values. I.e., each variant may have a different number of data values for these fields. One trade-off you have to make when loading data into NumPy arrays is that you cannot have arrays with a variable number of items per row. Rather, you have to fix the maximum number of possible items. While you lose some flexibility, you gain speed of access.</p>

<p>For fields like ‘ALT’, scikit-allel will choose a default number of expected values, which is set at 3. E.g., here is what you get by default:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">read_vcf</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">)</span>
<span class="n">callset</span><span class="p">[</span><span class="s">'variants/ALT'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([['A', '', ''],
       ['A', '', ''],
       ['G', 'T', ''],
       ['', '', ''],
       ['G', 'GTCT', '']], dtype=object)
</code></pre></div></div>

<p>In this case, 3 is more that we need, because no variant has more than 2 ALT values. However, some VCF files (especially those including INDELs) may have more than 3 ALT values.</p>

<p>If you need to increase or decrease the expected number of values for any field, you can do this via the <strong>numbers</strong> parameter. E.g., increase the number of ALT values to 5:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">read_vcf</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">,</span> <span class="n">numbers</span><span class="o">=</span><span class="p">{</span><span class="s">'ALT'</span><span class="p">:</span> <span class="mi">5</span><span class="p">})</span>
<span class="n">callset</span><span class="p">[</span><span class="s">'variants/ALT'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([['A', '', '', '', ''],
       ['A', '', '', '', ''],
       ['G', 'T', '', '', ''],
       ['', '', '', '', ''],
       ['G', 'GTCT', '', '', '']], dtype=object)
</code></pre></div></div>

<p>Some care is needed here, because if you choose a value that is lower than the maximum number of values in the VCF file, then any extra values will not get extracted. E.g., the following would be fine if all variants were biallelic, but would lose information for any multi-allelic variants:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">read_vcf</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">,</span> <span class="n">numbers</span><span class="o">=</span><span class="p">{</span><span class="s">'ALT'</span><span class="p">:</span> <span class="mi">1</span><span class="p">})</span>
<span class="n">callset</span><span class="p">[</span><span class="s">'variants/ALT'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array(['A', 'A', 'G', '', 'G'], dtype=object)
</code></pre></div></div>

<h4 id="number-of-alternate-alleles">Number of alternate alleles</h4>

<p>Often there will be several fields within a VCF that all have a number of values that depends on the number of alternate alleles (declared with number ‘A’ or ‘R’ in the VCF meta-information). You can set the expected number of values simultaneously for all such fields via the <strong>alt_number</strong> parameter:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">read_vcf</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">,</span> <span class="n">fields</span><span class="o">=</span><span class="p">[</span><span class="s">'ALT'</span><span class="p">,</span> <span class="s">'AF'</span><span class="p">],</span> <span class="n">alt_number</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span><span class="p">[</span><span class="s">'variants/ALT'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([['A', ''],
       ['A', ''],
       ['G', 'T'],
       ['', ''],
       ['G', 'GTCT']], dtype=object)
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span><span class="p">[</span><span class="s">'variants/AF'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([[ 0.5  ,    nan],
       [ 0.017,    nan],
       [ 0.333,  0.667],
       [   nan,    nan],
       [   nan,    nan]], dtype=float32)
</code></pre></div></div>

<h4 id="genotype-ploidy">Genotype ploidy</h4>

<p>By default, scikit-allel assumes you are working with a diploid organism, and so expects to parse out 2 alleles for each genotype call. If you are working with an organism with some other ploidy, you can change the expected number of alleles via the <strong>numbers</strong> parameter.</p>

<p>For example, here is an example VCF with tetraploid genotype calls:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'example_polyploid.vcf'</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##fileformat=VCFv4.3
##FORMAT=&lt;ID=GT,Number=1,Type=String,Description="Genotype"&gt;
#CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	sample1	sample2	sample3
20	14370	.	G	A	.	.	.	GT	0/0/0/0	0/0/0/1	0/0/1/1
20	17330	.	T	A,C,G	.	.	.	GT	1/1/2/2	0/1/2/3	3/3/3/3
</code></pre></div></div>

<p>Here is how to indicate the ploidy:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">read_vcf</span><span class="p">(</span><span class="s">'example_polyploid.vcf'</span><span class="p">,</span> <span class="n">numbers</span><span class="o">=</span><span class="p">{</span><span class="s">'GT'</span><span class="p">:</span> <span class="mi">4</span><span class="p">})</span>
<span class="n">callset</span><span class="p">[</span><span class="s">'calldata/GT'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([[[0, 0, 0, 0],
        [0, 0, 0, 1],
        [0, 0, 1, 1]],

       [[1, 1, 2, 2],
        [0, 1, 2, 3],
        [3, 3, 3, 3]]], dtype=int8)
</code></pre></div></div>

<p>As shown earlier for diploid calls, the <code class="highlighter-rouge">GenotypeArray</code> class can provide some extra functionality over a plain NumPy array, e.g.:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">gt</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">GenotypeArray</span><span class="p">(</span><span class="n">callset</span><span class="p">[</span><span class="s">'calldata/GT'</span><span class="p">])</span>
<span class="n">gt</span></code></pre></figure>

<div class="allel allel-DisplayAs2D"><span>&lt;GenotypeArray shape=(2, 3, 4) dtype=int8&gt;</span><table><thead><tr><th></th><th style="text-align: center">0</th><th style="text-align: center">1</th><th style="text-align: center">2</th></tr></thead><tbody><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">0</th><td style="text-align: center">0/0/0/0</td><td style="text-align: center">0/0/0/1</td><td style="text-align: center">0/0/1/1</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">1</th><td style="text-align: center">1/1/2/2</td><td style="text-align: center">0/1/2/3</td><td style="text-align: center">3/3/3/3</td></tr></tbody></table></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">gt</span><span class="o">.</span><span class="n">is_het</span><span class="p">()</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([[False,  True,  True],
       [ True,  True, False]], dtype=bool)
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">ac</span> <span class="o">=</span> <span class="n">gt</span><span class="o">.</span><span class="n">count_alleles</span><span class="p">()</span>
<span class="n">ac</span></code></pre></figure>

<div class="allel allel-DisplayAs2D"><span>&lt;AlleleCountsArray shape=(2, 4) dtype=int32&gt;</span><table><thead><tr><th></th><th style="text-align: center">0</th><th style="text-align: center">1</th><th style="text-align: center">2</th><th style="text-align: center">3</th></tr></thead><tbody><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">0</th><td style="text-align: center">9</td><td style="text-align: center">3</td><td style="text-align: center">0</td><td style="text-align: center">0</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">1</th><td style="text-align: center">1</td><td style="text-align: center">3</td><td style="text-align: center">3</td><td style="text-align: center">5</td></tr></tbody></table></div>

<h3 id="region">Region</h3>

<p>You can extract data for only a specific chromosome or genome region via the <strong>region</strong> parameter. The value of the parameter should be a region string of the format ‘{chromosome}:{begin}-{end}’, just like you would give to tabix or samtools. E.g.:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">read_vcf</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">,</span> <span class="n">region</span><span class="o">=</span><span class="s">'20:1000000-1231000'</span><span class="p">)</span>
<span class="n">callset</span><span class="p">[</span><span class="s">'variants/POS'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([1110696, 1230237], dtype=int32)
</code></pre></div></div>

<p>By default, scikit-allel will try to use tabix to extract the data from the requested region. If tabix is not available on your system or the VCF file has not been tabix indexed, scikit-allel will fall back to scanning through the VCF file from the beginning, which may be slow. If you have tabix installed but it is in a non-standard location, you can specify the path to the tabix executable via the <strong>tabix</strong> parameter.</p>

<p>Note that if you are using tabix, then tabix needs to be at least version 0.2.5. Some older versions of tabix do not support the “-h” option to output the headers from the VCF, which scikit-allel needs to get the meta-information for parsing. If you get an error message like “RuntimeError: VCF file is missing mandatory header line (“#CHROM…”)” then check your tabix version and upgrade if necessary. If you have conda installed, a recent version tabix can be installed via the following command: <code class="highlighter-rouge">conda install -c bioconda htslib</code>.</p>

<h3 id="samples">Samples</h3>

<p>You can extract data for only specific samples via the <strong>samples</strong> parameter. E.g., extract data for samples ‘NA00001’ and ‘NA00003’:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">read_vcf</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">,</span> <span class="n">samples</span><span class="o">=</span><span class="p">[</span><span class="s">'NA00001'</span><span class="p">,</span> <span class="s">'NA00003'</span><span class="p">])</span>
<span class="n">callset</span><span class="p">[</span><span class="s">'samples'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array(['NA00001', 'NA00003'], dtype=object)
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">allel</span><span class="o">.</span><span class="n">GenotypeArray</span><span class="p">(</span><span class="n">callset</span><span class="p">[</span><span class="s">'calldata/GT'</span><span class="p">])</span></code></pre></figure>

<div class="allel allel-DisplayAs2D"><span>&lt;GenotypeArray shape=(5, 2, 2) dtype=int8&gt;</span><table><thead><tr><th></th><th style="text-align: center">0</th><th style="text-align: center">1</th></tr></thead><tbody><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">0</th><td style="text-align: center">0/0</td><td style="text-align: center">1/1</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">1</th><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">2</th><td style="text-align: center">0/2</td><td style="text-align: center">2/2</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">3</th><td style="text-align: center">0/0</td><td style="text-align: center">./.</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">4</th><td style="text-align: center">0/1</td><td style="text-align: center">1/1</td></tr></tbody></table></div>

<p>Note that the genotype array now only has two columns, corresponding to the two samples requested.</p>

<h2 id="vcf_to_npz"><a href="http://scikit-allel.readthedocs.io/en/latest/io.html#allel.vcf_to_npz"><code class="highlighter-rouge">vcf_to_npz()</code></a></h2>

<p>NumPy arrays are stored in main memory (a.k.a., RAM), which means that as soon as you end your Python session or restart your Jupyter notebook kernel, any data stored in a NumPy array will be lost.</p>

<p>If your VCF file is not too big, you can extract data from the file into NumPy arrays then save those arrays to disk via the <a href="http://scikit-allel.readthedocs.io/en/latest/io.html#allel.vcf_to_npz"><code class="highlighter-rouge">vcf_to_npz()</code></a> function. This function has most of the same parameters as the <code class="highlighter-rouge">read_vcf()</code> function, except that you also specify an output path, which is the name of the file you want to save the extracted data to. For example:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">allel</span><span class="o">.</span><span class="n">vcf_to_npz</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">,</span> <span class="s">'example.npz'</span><span class="p">,</span> <span class="n">fields</span><span class="o">=</span><span class="s">'*'</span><span class="p">,</span> <span class="n">overwrite</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span></code></pre></figure>

<p>This extraction only needs to be done once, then you can load the data any time directly into NumPy arrays via the NumPy <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.load.html"><code class="highlighter-rouge">load()</code></a> function, e.g.:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="n">callset</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s">'example.npz'</span><span class="p">)</span>
<span class="n">callset</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;numpy.lib.npyio.NpzFile at 0x7f829b07d6d8&gt;
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="nb">sorted</span><span class="p">(</span><span class="n">callset</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>['calldata/DP',
 'calldata/GT',
 'samples',
 'variants/AF',
 'variants/ALT',
 'variants/CHROM',
 'variants/DB',
 'variants/DP',
 'variants/FILTER_PASS',
 'variants/FILTER_q10',
 'variants/FILTER_s50',
 'variants/ID',
 'variants/POS',
 'variants/QUAL',
 'variants/REF',
 'variants/is_snp',
 'variants/numalt',
 'variants/svlen']
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span><span class="p">[</span><span class="s">'variants/POS'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([  14370,   17330, 1110696, 1230237, 1234567], dtype=int32)
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span><span class="p">[</span><span class="s">'calldata/GT'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([[[ 0,  0],
        [ 0,  1],
        [ 1,  1]],

       [[ 0,  0],
        [ 0,  1],
        [ 0,  0]],

       [[ 0,  2],
        [ 1,  2],
        [ 2,  2]],

       [[ 0,  0],
        [ 0,  0],
        [-1, -1]],

       [[ 0,  1],
        [ 0,  2],
        [ 1,  1]]], dtype=int8)
</code></pre></div></div>

<p>Note that although the data have been saved to disk, all of the data must be loaded into main memory first during the extraction process, so this function is not suitable if you have a dataset that is too large to fit into main memory.</p>

<h2 id="vcf_to_hdf5"><a href="http://scikit-allel.readthedocs.io/en/latest/io.html#allel.vcf_to_hdf5"><code class="highlighter-rouge">vcf_to_hdf5()</code></a></h2>

<p>For large datasets, the <a href="http://scikit-allel.readthedocs.io/en/latest/io.html#allel.vcf_to_hdf5"><code class="highlighter-rouge">vcf_to_hdf5()</code></a> function is available. This function again takes similar parameters to <code class="highlighter-rouge">read_vcf()</code>, but will store extracted data into an HDF5 file stored on disk. The extraction process works through the VCF file in chunks, and so the entire dataset is never loaded entirely into main memory. A bit further below I give worked examples with a large dataset, but for now here is a simple example:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">allel</span><span class="o">.</span><span class="n">vcf_to_hdf5</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">,</span> <span class="s">'example.h5'</span><span class="p">,</span> <span class="n">fields</span><span class="o">=</span><span class="s">'*'</span><span class="p">,</span> <span class="n">overwrite</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span></code></pre></figure>

<p>The saved data can be accessed via the <a href="http://www.h5py.org/"><code class="highlighter-rouge">h5py</code></a> library, e.g.:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">h5py</span>
<span class="n">callset</span> <span class="o">=</span> <span class="n">h5py</span><span class="o">.</span><span class="n">File</span><span class="p">(</span><span class="s">'example.h5'</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">'r'</span><span class="p">)</span>
<span class="n">callset</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;HDF5 file "example.h5" (mode r)&gt;
</code></pre></div></div>

<p>The one difference to be aware of here is that accessing data via a key like ‘variants/POS’ does not return a NumPy array, instead you get an HDF5 dataset object.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">chrom</span> <span class="o">=</span> <span class="n">callset</span><span class="p">[</span><span class="s">'variants/CHROM'</span><span class="p">]</span>
<span class="n">chrom</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;HDF5 dataset "CHROM": shape (5,), type "|O"&gt;
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">pos</span> <span class="o">=</span> <span class="n">callset</span><span class="p">[</span><span class="s">'variants/POS'</span><span class="p">]</span>
<span class="n">pos</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;HDF5 dataset "POS": shape (5,), type "&lt;i4"&gt;
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">gt</span> <span class="o">=</span> <span class="n">callset</span><span class="p">[</span><span class="s">'calldata/GT'</span><span class="p">]</span>
<span class="n">gt</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;HDF5 dataset "GT": shape (5, 3, 2), type "|i1"&gt;
</code></pre></div></div>

<p>This dataset object is useful because you can then load all or only part of the underlying data into main memory via slicing. E.g.:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c"># load second to fourth items into NumPy array</span>
<span class="n">chrom</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array(['20', '20'], dtype=object)
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c"># load second to fourth items into NumPy array</span>
<span class="n">pos</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([  17330, 1110696], dtype=int32)
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c"># load all items into NumPy array</span>
<span class="n">chrom</span><span class="p">[:]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array(['20', '20', '20', '20', '20'], dtype=object)
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c"># load all items into NumPy array</span>
<span class="n">pos</span><span class="p">[:]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([  14370,   17330, 1110696, 1230237, 1234567], dtype=int32)
</code></pre></div></div>

<p>This is particularly useful for the large data coming from the sample fields, e.g., the genotype calls. With these data you can use slicing to pull out particular rows or columns without having to load all data into memory. E.g.:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c"># load genotype calls into memory for second to fourth variants, all samples</span>
<span class="n">allel</span><span class="o">.</span><span class="n">GenotypeArray</span><span class="p">(</span><span class="n">gt</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="p">:])</span></code></pre></figure>

<div class="allel allel-DisplayAs2D"><span>&lt;GenotypeArray shape=(2, 3, 2) dtype=int8&gt;</span><table><thead><tr><th></th><th style="text-align: center">0</th><th style="text-align: center">1</th><th style="text-align: center">2</th></tr></thead><tbody><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">0</th><td style="text-align: center">0/0</td><td style="text-align: center">0/1</td><td style="text-align: center">0/0</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">1</th><td style="text-align: center">0/2</td><td style="text-align: center">1/2</td><td style="text-align: center">2/2</td></tr></tbody></table></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c"># load genotype calls into memory for all variants, first and second samples</span>
<span class="n">allel</span><span class="o">.</span><span class="n">GenotypeArray</span><span class="p">(</span><span class="n">gt</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">])</span></code></pre></figure>

<div class="allel allel-DisplayAs2D"><span>&lt;GenotypeArray shape=(5, 2, 2) dtype=int8&gt;</span><table><thead><tr><th></th><th style="text-align: center">0</th><th style="text-align: center">1</th></tr></thead><tbody><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">0</th><td style="text-align: center">0/0</td><td style="text-align: center">0/1</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">1</th><td style="text-align: center">0/0</td><td style="text-align: center">0/1</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">2</th><td style="text-align: center">0/2</td><td style="text-align: center">1/2</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">3</th><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">4</th><td style="text-align: center">0/1</td><td style="text-align: center">0/2</td></tr></tbody></table></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c"># load all genotype calls into memory</span>
<span class="n">allel</span><span class="o">.</span><span class="n">GenotypeArray</span><span class="p">(</span><span class="n">gt</span><span class="p">[:,</span> <span class="p">:])</span></code></pre></figure>

<div class="allel allel-DisplayAs2D"><span>&lt;GenotypeArray shape=(5, 3, 2) dtype=int8&gt;</span><table><thead><tr><th></th><th style="text-align: center">0</th><th style="text-align: center">1</th><th style="text-align: center">2</th></tr></thead><tbody><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">0</th><td style="text-align: center">0/0</td><td style="text-align: center">0/1</td><td style="text-align: center">1/1</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">1</th><td style="text-align: center">0/0</td><td style="text-align: center">0/1</td><td style="text-align: center">0/0</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">2</th><td style="text-align: center">0/2</td><td style="text-align: center">1/2</td><td style="text-align: center">2/2</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">3</th><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">./.</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">4</th><td style="text-align: center">0/1</td><td style="text-align: center">0/2</td><td style="text-align: center">1/1</td></tr></tbody></table></div>

<h3 id="storing-strings">Storing strings</h3>

<p>By default, scikit-allel will store data from string fields like CHROM, ID, REF and ALT in the HDF5 file as variable length strings. Unfortunately HDF5 uses a lot of space to store variable length strings, and so for larger datasets this can lead to very large HDF5 file sizes. You can disable this option by setting the <strong>vlen</strong> parameter to <code class="highlighter-rouge">False</code>, which will force all data from string fields to be stored as fixed length strings. For example:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">allel</span><span class="o">.</span><span class="n">vcf_to_hdf5</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">,</span> <span class="s">'example_novlen.h5'</span><span class="p">,</span> <span class="n">fields</span><span class="o">=</span><span class="s">'*'</span><span class="p">,</span> <span class="n">overwrite</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">vlen</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span> <span class="o">=</span> <span class="n">h5py</span><span class="o">.</span><span class="n">File</span><span class="p">(</span><span class="s">'example_novlen.h5'</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">'r'</span><span class="p">)</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span><span class="p">[</span><span class="s">'variants/ID'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;HDF5 dataset "ID": shape (5,), type "|S9"&gt;
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span><span class="p">[</span><span class="s">'variants/ID'</span><span class="p">][:]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([b'rs6054257', b'.', b'rs6040355', b'.', b'microsat1'],
      dtype='|S9')
</code></pre></div></div>

<p>Note that an appropriate length to use for the fixed length string data type for each string field will be guessed from the longest string found for each field in the first chunk of the VCF. In some cases there may be longer strings found later in a VCF, in which case string values may get truncated. If you already know something about the longest value in a given field, you can specify <strong>types</strong> manually to avoid truncation, e.g.:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">allel</span><span class="o">.</span><span class="n">vcf_to_hdf5</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">,</span> <span class="s">'example_novlen_types.h5'</span><span class="p">,</span> 
                  <span class="n">fields</span><span class="o">=</span><span class="p">[</span><span class="s">'CHROM'</span><span class="p">,</span> <span class="s">'ID'</span><span class="p">],</span>
                  <span class="n">types</span><span class="o">=</span><span class="p">{</span><span class="s">'CHROM'</span><span class="p">:</span> <span class="s">'S2'</span><span class="p">,</span> <span class="s">'ID'</span><span class="p">:</span> <span class="s">'S10'</span><span class="p">},</span>
                  <span class="n">overwrite</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">vlen</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span> <span class="o">=</span> <span class="n">h5py</span><span class="o">.</span><span class="n">File</span><span class="p">(</span><span class="s">'example_novlen_types.h5'</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">'r'</span><span class="p">)</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span><span class="p">[</span><span class="s">'variants/ID'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;HDF5 dataset "ID": shape (5,), type "|S10"&gt;
</code></pre></div></div>

<h2 id="vcf_to_zarr"><a href="http://scikit-allel.readthedocs.io/en/latest/io.html#allel.vcf_to_zarr"><code class="highlighter-rouge">vcf_to_zarr()</code></a></h2>

<p>An alternative to HDF5 is a newer storage library called <a href="http://zarr.readthedocs.io/en/latest/">Zarr</a>. Currently there is only a Python implementation of Zarr, whereas you can access HDF5 files using a variety of different programming languages, so if you need portability then HDF5 is a better option. However, if you know you’re only going to be using Python, then Zarr is a good option. In general it is a bit faster than HDF5, provides more storage and compression options, and also plays better with parellel computing libraries like <a href="http://dask.pydata.org/en/latest/">Dask</a>.</p>

<p>To install Zarr, from the command line, run: <code class="highlighter-rouge">conda install -c conda-forge zarr</code></p>

<p>To extract data to Zarr, for example:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">allel</span><span class="o">.</span><span class="n">vcf_to_zarr</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">,</span> <span class="s">'example.zarr'</span><span class="p">,</span> <span class="n">fields</span><span class="o">=</span><span class="s">'*'</span><span class="p">,</span> <span class="n">overwrite</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span></code></pre></figure>

<p>Then, to access saved data:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">zarr</span>
<span class="kn">import</span> <span class="nn">numcodecs</span>
<span class="k">print</span><span class="p">(</span><span class="s">'zarr'</span><span class="p">,</span> <span class="n">zarr</span><span class="o">.</span><span class="n">__version__</span><span class="p">,</span> <span class="s">'numcodecs'</span><span class="p">,</span> <span class="n">numcodecs</span><span class="o">.</span><span class="n">__version__</span><span class="p">)</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zarr 2.2.0 numcodecs 0.5.5
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span> <span class="o">=</span> <span class="n">zarr</span><span class="o">.</span><span class="n">open_group</span><span class="p">(</span><span class="s">'example.zarr'</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">'r'</span><span class="p">)</span>
<span class="n">callset</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;zarr.hierarchy.Group '/' read-only&gt;
</code></pre></div></div>

<p>Zarr group objects provide a <code class="highlighter-rouge">tree()</code> method which can be useful for exploring the hierarchy of groups and arrays, e.g.:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span><span class="o">.</span><span class="n">tree</span><span class="p">(</span><span class="n">expand</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span></code></pre></figure>

<link rel="stylesheet" href="./Extracting data from VCF files_files/style.min.css">
<div id="af2fed46-a4fc-43fa-bbcf-0bc02ebd5d5b" class="zarr-tree jstree jstree-1 jstree-default" role="tree" aria-multiselectable="true" tabindex="0" aria-activedescendant="j1_1" aria-busy="false"><ul class="jstree-container-ul jstree-children" role="group"><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Group&quot;}" aria-selected="false" aria-level="1" aria-labelledby="j1_1_anchor" aria-expanded="true" id="j1_1" class="jstree-node  jstree-open jstree-last"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j1_1_anchor"><i class="jstree-icon jstree-themeicon fa fa-folder jstree-themeicon-custom" role="presentation"></i><span>/</span></a><ul role="group" class="jstree-children"><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Group&quot;}" aria-selected="false" aria-level="2" aria-labelledby="j1_2_anchor" aria-expanded="true" id="j1_2" class="jstree-node  jstree-open"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j1_2_anchor"><i class="jstree-icon jstree-themeicon fa fa-folder jstree-themeicon-custom" role="presentation"></i><span>calldata</span></a><ul role="group" class="jstree-children"><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j1_3_anchor" id="j1_3" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j1_3_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>DP (5, 3) int16</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j1_4_anchor" id="j1_4" class="jstree-node  jstree-leaf jstree-last"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j1_4_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>GT (5, 3, 2) int8</span></a></li></ul></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="2" aria-labelledby="j1_5_anchor" id="j1_5" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j1_5_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>samples (3,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Group&quot;}" aria-selected="false" aria-level="2" aria-labelledby="j1_6_anchor" aria-expanded="true" id="j1_6" class="jstree-node  jstree-open jstree-last"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j1_6_anchor"><i class="jstree-icon jstree-themeicon fa fa-folder jstree-themeicon-custom" role="presentation"></i><span>variants</span></a><ul role="group" class="jstree-children"><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j1_7_anchor" id="j1_7" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j1_7_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>AF (5, 3) float32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j1_8_anchor" id="j1_8" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j1_8_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>ALT (5, 3) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j1_9_anchor" id="j1_9" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j1_9_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>CHROM (5,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j1_10_anchor" id="j1_10" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j1_10_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>DB (5,) bool</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j1_11_anchor" id="j1_11" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j1_11_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>DP (5,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j1_12_anchor" id="j1_12" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j1_12_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>FILTER_PASS (5,) bool</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j1_13_anchor" id="j1_13" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j1_13_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>FILTER_q10 (5,) bool</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j1_14_anchor" id="j1_14" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j1_14_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>FILTER_s50 (5,) bool</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j1_15_anchor" id="j1_15" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j1_15_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>ID (5,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j1_16_anchor" id="j1_16" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j1_16_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>POS (5,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j1_17_anchor" id="j1_17" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j1_17_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>QUAL (5,) float32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j1_18_anchor" id="j1_18" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j1_18_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>REF (5,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j1_19_anchor" id="j1_19" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j1_19_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>is_snp (5,) bool</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j1_20_anchor" id="j1_20" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j1_20_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>numalt (5,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j1_21_anchor" id="j1_21" class="jstree-node  jstree-leaf jstree-last"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j1_21_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>svlen (5, 3) int32</span></a></li></ul></li></ul></li></ul></div>
<script>
    if (!require.defined('jquery')) {
        require.config({
            paths: {
                jquery: '//cdnjs.cloudflare.com/ajax/libs/jquery/1.12.1/jquery.min'
            },
        });
    }
    if (!require.defined('jstree')) {
        require.config({
            paths: {
                jstree: '//cdnjs.cloudflare.com/ajax/libs/jstree/3.3.3/jstree.min'
            },
        });
    }
    require(['jstree'], function() {
        $('#af2fed46-a4fc-43fa-bbcf-0bc02ebd5d5b').jstree({
            types: {
                Group: {
                    icon: "fa fa-folder"
                },
                Array: {
                    icon: "fa fa-table"
                }
            },
            plugins: ["types"]
        });
    });
</script>

<p>As with h5py, arrays can be accessed via a path-like notation, e.g.:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">chrom</span> <span class="o">=</span> <span class="n">callset</span><span class="p">[</span><span class="s">'variants/CHROM'</span><span class="p">]</span>
<span class="n">chrom</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;zarr.core.Array '/variants/CHROM' (5,) object read-only&gt;
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">pos</span> <span class="o">=</span> <span class="n">callset</span><span class="p">[</span><span class="s">'variants/POS'</span><span class="p">]</span>
<span class="n">pos</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;zarr.core.Array '/variants/POS' (5,) int32 read-only&gt;
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">gt</span> <span class="o">=</span> <span class="n">callset</span><span class="p">[</span><span class="s">'calldata/GT'</span><span class="p">]</span>
<span class="n">gt</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;zarr.core.Array '/calldata/GT' (5, 3, 2) int8 read-only&gt;
</code></pre></div></div>

<p>Again as with h5py, data can be loaded into memory as numpy arrays via slice notation:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">chrom</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array(['20', '20'], dtype=object)
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">pos</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([  17330, 1110696], dtype=int32)
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">chrom</span><span class="p">[:]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array(['20', '20', '20', '20', '20'], dtype=object)
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">pos</span><span class="p">[:]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([  14370,   17330, 1110696, 1230237, 1234567], dtype=int32)
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">allel</span><span class="o">.</span><span class="n">GenotypeArray</span><span class="p">(</span><span class="n">gt</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="p">:])</span></code></pre></figure>

<div class="allel allel-DisplayAs2D"><span>&lt;GenotypeArray shape=(2, 3, 2) dtype=int8&gt;</span><table><thead><tr><th></th><th style="text-align: center">0</th><th style="text-align: center">1</th><th style="text-align: center">2</th></tr></thead><tbody><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">0</th><td style="text-align: center">0/0</td><td style="text-align: center">0/1</td><td style="text-align: center">0/0</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">1</th><td style="text-align: center">0/2</td><td style="text-align: center">1/2</td><td style="text-align: center">2/2</td></tr></tbody></table></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">allel</span><span class="o">.</span><span class="n">GenotypeArray</span><span class="p">(</span><span class="n">gt</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">])</span></code></pre></figure>

<div class="allel allel-DisplayAs2D"><span>&lt;GenotypeArray shape=(5, 2, 2) dtype=int8&gt;</span><table><thead><tr><th></th><th style="text-align: center">0</th><th style="text-align: center">1</th></tr></thead><tbody><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">0</th><td style="text-align: center">0/0</td><td style="text-align: center">0/1</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">1</th><td style="text-align: center">0/0</td><td style="text-align: center">0/1</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">2</th><td style="text-align: center">0/2</td><td style="text-align: center">1/2</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">3</th><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">4</th><td style="text-align: center">0/1</td><td style="text-align: center">0/2</td></tr></tbody></table></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">allel</span><span class="o">.</span><span class="n">GenotypeArray</span><span class="p">(</span><span class="n">gt</span><span class="p">[:])</span></code></pre></figure>

<div class="allel allel-DisplayAs2D"><span>&lt;GenotypeArray shape=(5, 3, 2) dtype=int8&gt;</span><table><thead><tr><th></th><th style="text-align: center">0</th><th style="text-align: center">1</th><th style="text-align: center">2</th></tr></thead><tbody><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">0</th><td style="text-align: center">0/0</td><td style="text-align: center">0/1</td><td style="text-align: center">1/1</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">1</th><td style="text-align: center">0/0</td><td style="text-align: center">0/1</td><td style="text-align: center">0/0</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">2</th><td style="text-align: center">0/2</td><td style="text-align: center">1/2</td><td style="text-align: center">2/2</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">3</th><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">./.</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">4</th><td style="text-align: center">0/1</td><td style="text-align: center">0/2</td><td style="text-align: center">1/1</td></tr></tbody></table></div>

<h2 id="vcf_to_dataframe"><a href="http://scikit-allel.readthedocs.io/en/latest/io.html#allel.vcf_to_dataframe"><code class="highlighter-rouge">vcf_to_dataframe()</code></a></h2>

<p>For some analyses it can be useful to think of the data in a VCF file as a table or data frame, especially if you are only analysing data from the fixed fields and don’t need the genotype calls or any other call data. The <a href="http://scikit-allel.readthedocs.io/en/latest/io.html#allel.vcf_to_dataframe"><code class="highlighter-rouge">vcf_to_dataframe()</code></a> function extracts data from a VCF and loads into a <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html">pandas DataFrame</a>. E.g.:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">vcf_to_dataframe</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">)</span>
<span class="n">df</span></code></pre></figure>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CHROM</th>
      <th>POS</th>
      <th>ID</th>
      <th>REF</th>
      <th>ALT_1</th>
      <th>ALT_2</th>
      <th>ALT_3</th>
      <th>QUAL</th>
      <th>FILTER_PASS</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>20</td>
      <td>14370</td>
      <td>rs6054257</td>
      <td>G</td>
      <td>A</td>
      <td></td>
      <td></td>
      <td>29.0</td>
      <td>True</td>
    </tr>
    <tr>
      <th>1</th>
      <td>20</td>
      <td>17330</td>
      <td>.</td>
      <td>T</td>
      <td>A</td>
      <td></td>
      <td></td>
      <td>3.0</td>
      <td>False</td>
    </tr>
    <tr>
      <th>2</th>
      <td>20</td>
      <td>1110696</td>
      <td>rs6040355</td>
      <td>A</td>
      <td>G</td>
      <td>T</td>
      <td></td>
      <td>67.0</td>
      <td>True</td>
    </tr>
    <tr>
      <th>3</th>
      <td>20</td>
      <td>1230237</td>
      <td>.</td>
      <td>T</td>
      <td></td>
      <td></td>
      <td></td>
      <td>47.0</td>
      <td>True</td>
    </tr>
    <tr>
      <th>4</th>
      <td>20</td>
      <td>1234567</td>
      <td>microsat1</td>
      <td>GTC</td>
      <td>G</td>
      <td>GTCT</td>
      <td></td>
      <td>50.0</td>
      <td>True</td>
    </tr>
  </tbody>
</table>
</div>

<p>Note that the ‘ALT’ field has been broken into three separate columns, labelled ‘ALT_1’, ‘ALT_2’ and ‘ALT_3’. When loading data into a data frame, any field with multiple values will be broken into multiple columns in this way.</p>

<p>Let’s extract all fields, and also reduce number of values per field given that we know there are at most 2 alternate alleles in our example VCF file:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">vcf_to_dataframe</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">,</span> <span class="n">fields</span><span class="o">=</span><span class="s">'*'</span><span class="p">,</span> <span class="n">alt_number</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">df</span></code></pre></figure>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CHROM</th>
      <th>POS</th>
      <th>ID</th>
      <th>REF</th>
      <th>ALT_1</th>
      <th>ALT_2</th>
      <th>QUAL</th>
      <th>DP</th>
      <th>AF_1</th>
      <th>AF_2</th>
      <th>DB</th>
      <th>FILTER_PASS</th>
      <th>FILTER_q10</th>
      <th>FILTER_s50</th>
      <th>numalt</th>
      <th>svlen_1</th>
      <th>svlen_2</th>
      <th>is_snp</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>20</td>
      <td>14370</td>
      <td>rs6054257</td>
      <td>G</td>
      <td>A</td>
      <td></td>
      <td>29.0</td>
      <td>14</td>
      <td>0.500</td>
      <td>NaN</td>
      <td>True</td>
      <td>True</td>
      <td>False</td>
      <td>False</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>True</td>
    </tr>
    <tr>
      <th>1</th>
      <td>20</td>
      <td>17330</td>
      <td>.</td>
      <td>T</td>
      <td>A</td>
      <td></td>
      <td>3.0</td>
      <td>11</td>
      <td>0.017</td>
      <td>NaN</td>
      <td>False</td>
      <td>False</td>
      <td>True</td>
      <td>False</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>True</td>
    </tr>
    <tr>
      <th>2</th>
      <td>20</td>
      <td>1110696</td>
      <td>rs6040355</td>
      <td>A</td>
      <td>G</td>
      <td>T</td>
      <td>67.0</td>
      <td>10</td>
      <td>0.333</td>
      <td>0.667</td>
      <td>True</td>
      <td>True</td>
      <td>False</td>
      <td>False</td>
      <td>2</td>
      <td>0</td>
      <td>0</td>
      <td>True</td>
    </tr>
    <tr>
      <th>3</th>
      <td>20</td>
      <td>1230237</td>
      <td>.</td>
      <td>T</td>
      <td></td>
      <td></td>
      <td>47.0</td>
      <td>13</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>False</td>
      <td>True</td>
      <td>False</td>
      <td>False</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>False</td>
    </tr>
    <tr>
      <th>4</th>
      <td>20</td>
      <td>1234567</td>
      <td>microsat1</td>
      <td>GTC</td>
      <td>G</td>
      <td>GTCT</td>
      <td>50.0</td>
      <td>9</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>False</td>
      <td>True</td>
      <td>False</td>
      <td>False</td>
      <td>2</td>
      <td>-2</td>
      <td>1</td>
      <td>False</td>
    </tr>
  </tbody>
</table>
</div>

<p>In case you were wondering, the ‘numalt’, ‘svlen’ and ‘is_snp’ fields are computed by scikit-allel, they are not present in the original VCF.</p>

<p>Pandas DataFrames have many useful features. For example, you can query:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s">'DP &gt; 10 and QUAL &gt; 20'</span><span class="p">)</span></code></pre></figure>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CHROM</th>
      <th>POS</th>
      <th>ID</th>
      <th>REF</th>
      <th>ALT_1</th>
      <th>ALT_2</th>
      <th>QUAL</th>
      <th>DP</th>
      <th>AF_1</th>
      <th>AF_2</th>
      <th>DB</th>
      <th>FILTER_PASS</th>
      <th>FILTER_q10</th>
      <th>FILTER_s50</th>
      <th>numalt</th>
      <th>svlen_1</th>
      <th>svlen_2</th>
      <th>is_snp</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>20</td>
      <td>14370</td>
      <td>rs6054257</td>
      <td>G</td>
      <td>A</td>
      <td></td>
      <td>29.0</td>
      <td>14</td>
      <td>0.5</td>
      <td>NaN</td>
      <td>True</td>
      <td>True</td>
      <td>False</td>
      <td>False</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>True</td>
    </tr>
    <tr>
      <th>3</th>
      <td>20</td>
      <td>1230237</td>
      <td>.</td>
      <td>T</td>
      <td></td>
      <td></td>
      <td>47.0</td>
      <td>13</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>False</td>
      <td>True</td>
      <td>False</td>
      <td>False</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>False</td>
    </tr>
  </tbody>
</table>
</div>

<h2 id="vcf_to_recarray"><a href="http://scikit-allel.readthedocs.io/en/latest/io.html#allel.vcf_to_recarray"><code class="highlighter-rouge">vcf_to_recarray()</code></a></h2>

<p>If you prefer to work with NumPy structured arrays rather than pandas DataFrames, try the <a href="http://scikit-allel.readthedocs.io/en/latest/io.html#allel.vcf_to_recarray"><code class="highlighter-rouge">vcf_to_recarray()</code></a> function, e.g.:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">ra</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">vcf_to_recarray</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">)</span>
<span class="n">ra</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([('20',   14370, 'rs6054257', 'G', 'A', '', '',  29.,  True),
       ('20',   17330, '.', 'T', 'A', '', '',   3., False),
       ('20', 1110696, 'rs6040355', 'A', 'G', 'T', '',  67.,  True),
       ('20', 1230237, '.', 'T', '', '', '',  47.,  True),
       ('20', 1234567, 'microsat1', 'GTC', 'G', 'GTCT', '',  50.,  True)],
      dtype=(numpy.record, [('CHROM', 'O'), ('POS', '&lt;i4'), ('ID', 'O'), ('REF', 'O'), ('ALT_1', 'O'), ('ALT_2', 'O'), ('ALT_3', 'O'), ('QUAL', '&lt;f4'), ('FILTER_PASS', '?')]))
</code></pre></div></div>

<h2 id="vcf_to_csv"><a href="http://scikit-allel.readthedocs.io/en/latest/io.html#allel.vcf_to_csv"><code class="highlighter-rouge">vcf_to_csv()</code></a></h2>

<p>Finally, the <a href="http://scikit-allel.readthedocs.io/en/latest/io.html#allel.vcf_to_csv"><code class="highlighter-rouge">vcf_to_csv()</code></a> function is available if you need to dump data from a VCF file out to a generic CSV file (e.g., to load into a database). E.g.:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">allel</span><span class="o">.</span><span class="n">vcf_to_csv</span><span class="p">(</span><span class="s">'example.vcf'</span><span class="p">,</span> <span class="s">'example.csv'</span><span class="p">,</span> <span class="n">fields</span><span class="o">=</span><span class="p">[</span><span class="s">'CHROM'</span><span class="p">,</span> <span class="s">'POS'</span><span class="p">,</span> <span class="s">'DP'</span><span class="p">])</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'example.csv'</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CHROM,POS,DP
20,14370,14
20,17330,11
20,1110696,10
20,1230237,13
20,1234567,9
</code></pre></div></div>

<p>This function uses the pandas <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_csv.html"><code class="highlighter-rouge">to_csv()</code></a> function under the hood to write the CSV, so you can control various output parameters (e.g., field separator) by passing through keyword arguments.</p>

<h2 id="worked-example-human-1000-genomes-phase-3">Worked example: human 1000 genomes phase 3</h2>

<p>I’ve downloaded a <a href="ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.chr22.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz">VCF file</a> with genotype data for Chromosome 22 from the 1000 genomes project phase 3 <a href="ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/">FTP site</a>.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">vcf_path</span> <span class="o">=</span> <span class="s">'data/ALL.chr22.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz'</span></code></pre></figure>

<p>Before we start processing, let’s see how big the file is (the ‘!’ is special Jupyter notebook syntax for running a command via the operating system shell):</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">ls</span> <span class="o">-</span><span class="n">lh</span> <span class="p">{</span><span class="n">vcf_path</span><span class="p">}</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-rw-r--r-- 1 aliman aliman 205M Jun 20  2017 data/ALL.chr22.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz
</code></pre></div></div>

<p>…and how many lines:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">zcat</span> <span class="p">{</span><span class="n">vcf_path</span><span class="p">}</span> <span class="o">|</span> <span class="n">wc</span> <span class="o">-</span><span class="n">l</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1103800
</code></pre></div></div>

<p>So there are more than a million variants.</p>

<h3 id="preparation">Preparation</h3>

<p>When processing larger VCF files it’s useful to get some feedback on how fast things are going. Let’s import the <code class="highlighter-rouge">sys</code> module so we can log to standard output:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">sys</span></code></pre></figure>

<p>Ultimately I am going to extract all the data from this VCF file into a Zarr store. However, before I do that, I’m going to check how many alternate alleles I should expect. I’m going to do that by extracting just the ‘numalt’ field, which scikit-allel will compute from the number of values in the ‘ALT’ field:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">read_vcf</span><span class="p">(</span><span class="n">vcf_path</span><span class="p">,</span> <span class="n">fields</span><span class="o">=</span><span class="p">[</span><span class="s">'numalt'</span><span class="p">],</span> <span class="n">log</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">)</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[read_vcf] 65536 rows in 8.19s; chunk in 8.19s (8001 rows/s); 22:18539397
[read_vcf] 131072 rows in 16.05s; chunk in 7.86s (8341 rows/s); 22:21016127
[read_vcf] 196608 rows in 22.73s; chunk in 6.69s (9800 rows/s); 22:23236362
[read_vcf] 262144 rows in 27.52s; chunk in 4.78s (13696 rows/s); 22:25227844
[read_vcf] 327680 rows in 32.98s; chunk in 5.46s (12001 rows/s); 22:27285434
[read_vcf] 393216 rows in 38.07s; chunk in 5.09s (12879 rows/s); 22:29572822
[read_vcf] 458752 rows in 43.13s; chunk in 5.06s (12940 rows/s); 22:31900536
[read_vcf] 524288 rows in 47.94s; chunk in 4.80s (13640 rows/s); 22:34069864
[read_vcf] 589824 rows in 53.03s; chunk in 5.09s (12869 rows/s); 22:36053392
[read_vcf] 655360 rows in 59.10s; chunk in 6.07s (10804 rows/s); 22:38088395
[read_vcf] 720896 rows in 66.34s; chunk in 7.25s (9044 rows/s); 22:40216200
[read_vcf] 786432 rows in 72.77s; chunk in 6.43s (10192 rows/s); 22:42597446
[read_vcf] 851968 rows in 78.85s; chunk in 6.08s (10775 rows/s); 22:44564263
[read_vcf] 917504 rows in 84.40s; chunk in 5.54s (11823 rows/s); 22:46390672
[read_vcf] 983040 rows in 89.51s; chunk in 5.12s (12807 rows/s); 22:48116697
[read_vcf] 1048576 rows in 95.96s; chunk in 6.45s (10162 rows/s); 22:49713436
[read_vcf] 1103547 rows in 102.48s; chunk in 6.52s (8436 rows/s)
[read_vcf] all done (10768 rows/s)
</code></pre></div></div>

<p>Let’s see what the largest number of alternate alleles is:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">numalt</span> <span class="o">=</span> <span class="n">callset</span><span class="p">[</span><span class="s">'variants/numalt'</span><span class="p">]</span>
<span class="n">np</span><span class="o">.</span><span class="nb">max</span><span class="p">(</span><span class="n">numalt</span><span class="p">)</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>8
</code></pre></div></div>

<p>Out of interest, how many variants are multi-allelic?</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">count_numalt</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">bincount</span><span class="p">(</span><span class="n">numalt</span><span class="p">)</span>
<span class="n">count_numalt</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([      0, 1097199,    6073,     224,      38,       9,       3,
             0,       1])
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">n_multiallelic</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">count_numalt</span><span class="p">[</span><span class="mi">2</span><span class="p">:])</span>
<span class="n">n_multiallelic</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>6348
</code></pre></div></div>

<p>So there are only a very small number of multi-allelic variants (6,348), the vast majority (1,097,199) have just one alternate allele.</p>

<h3 id="extract-to-zarr">Extract to Zarr</h3>

<p>Now we know how many alternate alleles to expect, let’s go ahead and extract everything out into a Zarr on-disk store. Time for a cup of tea:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">zarr_path</span> <span class="o">=</span> <span class="s">'data/ALL.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.zarr'</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">allel</span><span class="o">.</span><span class="n">vcf_to_zarr</span><span class="p">(</span><span class="n">vcf_path</span><span class="p">,</span> <span class="n">zarr_path</span><span class="p">,</span> <span class="n">group</span><span class="o">=</span><span class="s">'22'</span><span class="p">,</span>
                  <span class="n">fields</span><span class="o">=</span><span class="s">'*'</span><span class="p">,</span> <span class="n">alt_number</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">log</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">,</span>
                  <span class="n">compressor</span><span class="o">=</span><span class="n">numcodecs</span><span class="o">.</span><span class="n">Blosc</span><span class="p">(</span><span class="n">cname</span><span class="o">=</span><span class="s">'zstd'</span><span class="p">,</span> <span class="n">clevel</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">False</span><span class="p">))</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[vcf_to_zarr] 65536 rows in 15.14s; chunk in 15.14s (4328 rows/s); 22:18539397
[vcf_to_zarr] 131072 rows in 30.19s; chunk in 15.05s (4354 rows/s); 22:21016127
[vcf_to_zarr] 196608 rows in 42.07s; chunk in 11.88s (5515 rows/s); 22:23236362
[vcf_to_zarr] 262144 rows in 53.31s; chunk in 11.23s (5833 rows/s); 22:25227844
[vcf_to_zarr] 327680 rows in 64.61s; chunk in 11.30s (5800 rows/s); 22:27285434
[vcf_to_zarr] 393216 rows in 78.52s; chunk in 13.91s (4709 rows/s); 22:29572822
[vcf_to_zarr] 458752 rows in 92.61s; chunk in 14.09s (4650 rows/s); 22:31900536
[vcf_to_zarr] 524288 rows in 104.47s; chunk in 11.86s (5526 rows/s); 22:34069864
[vcf_to_zarr] 589824 rows in 117.29s; chunk in 12.82s (5111 rows/s); 22:36053392
[vcf_to_zarr] 655360 rows in 128.32s; chunk in 11.03s (5942 rows/s); 22:38088395
[vcf_to_zarr] 720896 rows in 139.75s; chunk in 11.43s (5735 rows/s); 22:40216200
[vcf_to_zarr] 786432 rows in 153.38s; chunk in 13.63s (4808 rows/s); 22:42597446
[vcf_to_zarr] 851968 rows in 165.66s; chunk in 12.28s (5336 rows/s); 22:44564263
[vcf_to_zarr] 917504 rows in 178.74s; chunk in 13.08s (5008 rows/s); 22:46390672
[vcf_to_zarr] 983040 rows in 190.38s; chunk in 11.64s (5630 rows/s); 22:48116697
[vcf_to_zarr] 1048576 rows in 201.35s; chunk in 10.96s (5977 rows/s); 22:49713436
[vcf_to_zarr] 1103547 rows in 211.84s; chunk in 10.49s (5238 rows/s)
[vcf_to_zarr] all done (5202 rows/s)
</code></pre></div></div>

<p>By default Zarr compresses data using LZ4 via the Blosc compression library, but here I’ve decided to use Blosc with Zstandard instead of LZ4. LZ4 is faster but has slightly lower compression ratio, so is a good option if disk space is not a major issue and you are working from a storage device with high bandwidth (e.g., an SSD). Zstd is slightly slower but compresses a bit better.</p>

<p>Zarr stores the data in multiple files within a directory hierarchy. How much storage is required in total?</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="err">!</span><span class="n">du</span> <span class="o">-</span><span class="n">hs</span> <span class="p">{</span><span class="n">zarr_path</span><span class="p">}</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>140M	data/ALL.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.zarr
</code></pre></div></div>

<p>To check things have worked as expected, let’s run a few quick diagnostics:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset_h1k</span> <span class="o">=</span> <span class="n">zarr</span><span class="o">.</span><span class="n">open_group</span><span class="p">(</span><span class="n">zarr_path</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">'r'</span><span class="p">)</span>
<span class="n">callset_h1k</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;zarr.hierarchy.Group '/' read-only&gt;
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset_h1k</span><span class="o">.</span><span class="n">tree</span><span class="p">(</span><span class="n">expand</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span></code></pre></figure>

<link rel="stylesheet" href="./Extracting data from VCF files_files/style.min.css">
<div id="8a8162d9-3aa5-4110-acf7-80fb2ac0355f" class="zarr-tree jstree jstree-2 jstree-default" role="tree" aria-multiselectable="true" tabindex="0" aria-activedescendant="j2_23" aria-busy="false"><ul class="jstree-container-ul jstree-children" role="group"><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Group&quot;}" aria-selected="false" aria-level="1" aria-labelledby="j2_1_anchor" aria-expanded="true" id="j2_1" class="jstree-node  jstree-open jstree-last"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_1_anchor"><i class="jstree-icon jstree-themeicon fa fa-folder jstree-themeicon-custom" role="presentation"></i><span>/</span></a><ul role="group" class="jstree-children"><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Group&quot;}" aria-selected="false" aria-level="2" aria-labelledby="j2_2_anchor" aria-expanded="true" id="j2_2" class="jstree-node  jstree-open jstree-last"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_2_anchor"><i class="jstree-icon jstree-themeicon fa fa-folder jstree-themeicon-custom" role="presentation"></i><span>22</span></a><ul role="group" class="jstree-children"><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Group&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j2_3_anchor" aria-expanded="true" id="j2_3" class="jstree-node  jstree-open"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_3_anchor"><i class="jstree-icon jstree-themeicon fa fa-folder jstree-themeicon-custom" role="presentation"></i><span>calldata</span></a><ul role="group" class="jstree-children"><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_4_anchor" id="j2_4" class="jstree-node  jstree-leaf jstree-last"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_4_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>GT (1103547, 2504, 2) int8</span></a></li></ul></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j2_5_anchor" id="j2_5" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_5_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>samples (2504,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Group&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j2_6_anchor" aria-expanded="true" id="j2_6" class="jstree-node  jstree-open jstree-last"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_6_anchor"><i class="jstree-icon jstree-themeicon fa fa-folder jstree-themeicon-custom" role="presentation"></i><span>variants</span></a><ul role="group" class="jstree-children"><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_7_anchor" id="j2_7" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_7_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>AA (1103547,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_8_anchor" id="j2_8" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_8_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>AC (1103547, 8) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_9_anchor" id="j2_9" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_9_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>AF (1103547, 8) float32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_10_anchor" id="j2_10" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_10_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>AFR_AF (1103547, 8) float32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_11_anchor" id="j2_11" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_11_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>ALT (1103547, 8) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_12_anchor" id="j2_12" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_12_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>AMR_AF (1103547, 8) float32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_13_anchor" id="j2_13" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_13_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>AN (1103547,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_14_anchor" id="j2_14" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_14_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>CHROM (1103547,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_15_anchor" id="j2_15" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_15_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>CIEND (1103547, 2) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_16_anchor" id="j2_16" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_16_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>CIPOS (1103547, 2) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_17_anchor" id="j2_17" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_17_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>CS (1103547,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_18_anchor" id="j2_18" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_18_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>DP (1103547,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_19_anchor" id="j2_19" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_19_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>EAS_AF (1103547, 8) float32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_20_anchor" id="j2_20" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_20_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>END (1103547,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_21_anchor" id="j2_21" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_21_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>EUR_AF (1103547, 8) float32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_22_anchor" id="j2_22" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_22_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>EX_TARGET (1103547,) bool</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_23_anchor" id="j2_23" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_23_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>FILTER_PASS (1103547,) bool</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_24_anchor" id="j2_24" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_24_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>ID (1103547,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_25_anchor" id="j2_25" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_25_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>IMPRECISE (1103547,) bool</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_26_anchor" id="j2_26" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_26_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>MC (1103547,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_27_anchor" id="j2_27" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_27_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>MEINFO (1103547, 4) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_28_anchor" id="j2_28" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_28_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>MEND (1103547,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_29_anchor" id="j2_29" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_29_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>MLEN (1103547,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_30_anchor" id="j2_30" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_30_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>MSTART (1103547,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_31_anchor" id="j2_31" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_31_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>MULTI_ALLELIC (1103547,) bool</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_32_anchor" id="j2_32" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_32_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>NS (1103547,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_33_anchor" id="j2_33" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_33_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>POS (1103547,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_34_anchor" id="j2_34" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_34_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>QUAL (1103547,) float32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_35_anchor" id="j2_35" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_35_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>REF (1103547,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_36_anchor" id="j2_36" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_36_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>SAS_AF (1103547, 8) float32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_37_anchor" id="j2_37" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_37_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>SVLEN (1103547,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_38_anchor" id="j2_38" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_38_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>SVTYPE (1103547,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_39_anchor" id="j2_39" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_39_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>TSD (1103547,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_40_anchor" id="j2_40" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_40_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>VT (1103547,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_41_anchor" id="j2_41" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_41_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>is_snp (1103547,) bool</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_42_anchor" id="j2_42" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_42_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>numalt (1103547,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j2_43_anchor" id="j2_43" class="jstree-node  jstree-leaf jstree-last"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j2_43_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>svlen (1103547, 8) int32</span></a></li></ul></li></ul></li></ul></li></ul></div>
<script>
    if (!require.defined('jquery')) {
        require.config({
            paths: {
                jquery: '//cdnjs.cloudflare.com/ajax/libs/jquery/1.12.1/jquery.min'
            },
        });
    }
    if (!require.defined('jstree')) {
        require.config({
            paths: {
                jstree: '//cdnjs.cloudflare.com/ajax/libs/jstree/3.3.3/jstree.min'
            },
        });
    }
    require(['jstree'], function() {
        $('#8a8162d9-3aa5-4110-acf7-80fb2ac0355f').jstree({
            types: {
                Group: {
                    icon: "fa fa-folder"
                },
                Array: {
                    icon: "fa fa-table"
                }
            },
            plugins: ["types"]
        });
    });
</script>

<p>Note here that I have loaded the data into a group named ‘22’, i.e., the data are grouped by chromosome. This is typically how we organise data in HDF5 or Zarr files in our own work with mosquitoes.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">pos</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">SortedIndex</span><span class="p">(</span><span class="n">callset_h1k</span><span class="p">[</span><span class="s">'22/variants/POS'</span><span class="p">])</span>
<span class="n">pos</span></code></pre></figure>

<div class="allel allel-DisplayAs1D"><span>&lt;SortedIndex shape=(1103547,) dtype=int32&gt;</span><table><thead><tr><th style="text-align: center">0</th><th style="text-align: center">1</th><th style="text-align: center">2</th><th style="text-align: center">3</th><th style="text-align: center">4</th><th style="text-align: center">...</th><th style="text-align: center">1103542</th><th style="text-align: center">1103543</th><th style="text-align: center">1103544</th><th style="text-align: center">1103545</th><th style="text-align: center">1103546</th></tr></thead><tbody><tr><td style="text-align: center">16050075</td><td style="text-align: center">16050115</td><td style="text-align: center">16050213</td><td style="text-align: center">16050319</td><td style="text-align: center">16050527</td><td style="text-align: center">...</td><td style="text-align: center">51241342</td><td style="text-align: center">51241386</td><td style="text-align: center">51244163</td><td style="text-align: center">51244205</td><td style="text-align: center">51244237</td></tr></tbody></table></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">plot_windowed_variant_density</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">window_size</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    
    <span class="c"># setup windows </span>
    <span class="n">bins</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">pos</span><span class="o">.</span><span class="nb">max</span><span class="p">(),</span> <span class="n">window_size</span><span class="p">)</span>
    
    <span class="c"># use window midpoints as x coordinate</span>
    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">bins</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="o">+</span> <span class="n">bins</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span>
    
    <span class="c"># compute variant density in each window</span>
    <span class="n">h</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">histogram</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">bins</span><span class="o">=</span><span class="n">bins</span><span class="p">)</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">h</span> <span class="o">/</span> <span class="n">window_size</span>
    
    <span class="c"># plot</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
    <span class="n">sns</span><span class="o">.</span><span class="n">despine</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">offset</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'Chromosome position (bp)'</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'Variant density (bp$^{-1}$)'</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">title</span><span class="p">:</span>
        <span class="n">ax</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="n">title</span><span class="p">)</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">plot_windowed_variant_density</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">window_size</span><span class="o">=</span><span class="mi">100000</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s">'Variant density'</span><span class="p">)</span></code></pre></figure>

<p><img src="./Extracting data from VCF files_files/2017-06-14-read-vcf_169_0.png" alt="png"></p>

<p>When working with large genotype arrays, scikit-allel has a <a href="http://alimanfoo.github.io/2017/06/14/@@TODO"><code class="highlighter-rouge">GenotypeDaskArray</code></a> class that is like the <a href="http://alimanfoo.github.io/2017/06/14/@@TODO"><code class="highlighter-rouge">GenotypeArray</code></a> class we met earlier but can handle data stored on-disk in HDF5 or Zarr files and compute over them without loading all data into memory.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">gt</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">GenotypeDaskArray</span><span class="p">(</span><span class="n">callset_h1k</span><span class="p">[</span><span class="s">'22/calldata/GT'</span><span class="p">])</span>
<span class="n">gt</span></code></pre></figure>

<div class="allel allel-DisplayAs2D"><span>&lt;GenotypeDaskArray shape=(1103547, 2504, 2) dtype=int8&gt;</span><table><thead><tr><th></th><th style="text-align: center">0</th><th style="text-align: center">1</th><th style="text-align: center">2</th><th style="text-align: center">3</th><th style="text-align: center">4</th><th style="text-align: center">...</th><th style="text-align: center">2499</th><th style="text-align: center">2500</th><th style="text-align: center">2501</th><th style="text-align: center">2502</th><th style="text-align: center">2503</th></tr></thead><tbody><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">0</th><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">...</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">1</th><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">...</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">2</th><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">...</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">...</th><td style="text-align: center" colspan="12">...</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">1103544</th><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">...</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">1103545</th><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">...</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">1103546</th><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">...</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td><td style="text-align: center">0/0</td></tr></tbody></table></div>

<p>The main difference with the Dask-backed arrays is that you need to explicitly call <code class="highlighter-rouge">compute()</code> to run a computation, e.g.:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">%%</span><span class="n">time</span>
<span class="n">ac</span> <span class="o">=</span> <span class="n">gt</span><span class="o">.</span><span class="n">count_alleles</span><span class="p">(</span><span class="n">max_allele</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">compute</span><span class="p">()</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CPU times: user 28 s, sys: 651 ms, total: 28.7 s
Wall time: 4.23 s
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">ac</span></code></pre></figure>

<div class="allel allel-DisplayAs2D"><span>&lt;AlleleCountsArray shape=(1103547, 9) dtype=int64&gt;</span><table><thead><tr><th></th><th style="text-align: center">0</th><th style="text-align: center">1</th><th style="text-align: center">2</th><th style="text-align: center">3</th><th style="text-align: center">4</th><th style="text-align: center">5</th><th style="text-align: center">6</th><th style="text-align: center">7</th><th style="text-align: center">8</th></tr></thead><tbody><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">0</th><td style="text-align: center">5007</td><td style="text-align: center">   1</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">1</th><td style="text-align: center">4976</td><td style="text-align: center">  32</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">2</th><td style="text-align: center">4970</td><td style="text-align: center">  38</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">...</th><td style="text-align: center" colspan="10">...</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">1103544</th><td style="text-align: center">4969</td><td style="text-align: center">  39</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">1103545</th><td style="text-align: center">5007</td><td style="text-align: center">   1</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td></tr><tr><th style="text-align: center; background-color: white; border-right: 1px solid black; ">1103546</th><td style="text-align: center">4989</td><td style="text-align: center">  19</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td><td style="text-align: center">   0</td></tr></tbody></table></div>

<h2 id="further-reading">Further reading</h2>

<p>If you have any questions, please send an email to the <a href="https://groups.google.com/forum/#!forum/scikit-allel">scikit-allel mailing list</a>. If you’re wondering where to go next, some of these articles may be of interest:</p>

<ul>
  <li><a href="http://alimanfoo.github.io/2017/05/18/installing-python.html">Installing Python for data analysis</a></li>
  <li><a href="http://alimanfoo.github.io/2016/06/10/scikit-allel-tour.html">A tour of scikit-allel</a></li>
  <li><a href="http://alimanfoo.github.io/2015/09/28/fast-pca.html">Fast PCA</a></li>
  <li><a href="http://alimanfoo.github.io/2015/09/21/estimating-fst.html">Estimating F<sub>ST</sub></a></li>
  <li><a href="http://alimanfoo.github.io/2017/02/14/mendelian-transmission.html">Mendelian transmission</a></li>
</ul>

<p>Further documentation about scikit-allel is available from the <a href="http://scikit-allel.readthedocs.io/en/latest/">scikit-allel API docs</a>.</p>

<h2 id="post-script-grouping-by-chromosome">Post-script: grouping by chromosome</h2>

<p>In the worked example above, I had a VCF file with data from a single chromosome, and I used the “group” argument to extract the data into the Zarr store under a group named after the chromosome (“22”). This wasn’t strictly necessary for the worked example, but if I then wanted to extract data for other chromosomes, grouping the data by chromosome provides a convenient way to keep the data organised.</p>

<p>For example, if I also wanted to extract data for Chromosome 21, I would do the following:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">vcf_path</span> <span class="o">=</span> <span class="s">'data/ALL.chr21.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz'</span>

<span class="n">allel</span><span class="o">.</span><span class="n">vcf_to_zarr</span><span class="p">(</span><span class="n">vcf_path</span><span class="p">,</span> <span class="n">zarr_path</span><span class="p">,</span> <span class="n">group</span><span class="o">=</span><span class="s">'21'</span><span class="p">,</span>
                  <span class="n">fields</span><span class="o">=</span><span class="s">'*'</span><span class="p">,</span> <span class="n">alt_number</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">log</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">,</span>
                  <span class="n">compressor</span><span class="o">=</span><span class="n">numcodecs</span><span class="o">.</span><span class="n">Blosc</span><span class="p">(</span><span class="n">cname</span><span class="o">=</span><span class="s">'zstd'</span><span class="p">,</span> <span class="n">clevel</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">False</span><span class="p">))</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[vcf_to_zarr] 65536 rows in 12.83s; chunk in 12.83s (5109 rows/s); 21:15597733
[vcf_to_zarr] 131072 rows in 23.83s; chunk in 11.01s (5953 rows/s); 21:17688253
[vcf_to_zarr] 196608 rows in 34.98s; chunk in 11.15s (5877 rows/s); 21:19697865
[vcf_to_zarr] 262144 rows in 46.24s; chunk in 11.26s (5821 rows/s); 21:21745371
[vcf_to_zarr] 327680 rows in 57.22s; chunk in 10.98s (5969 rows/s); 21:23694335
[vcf_to_zarr] 393216 rows in 68.53s; chunk in 11.31s (5795 rows/s); 21:25609367
[vcf_to_zarr] 458752 rows in 81.13s; chunk in 12.60s (5200 rows/s); 21:27761870
[vcf_to_zarr] 524288 rows in 93.15s; chunk in 12.02s (5450 rows/s); 21:29885097
[vcf_to_zarr] 589824 rows in 104.42s; chunk in 11.27s (5816 rows/s); 21:32050808
[vcf_to_zarr] 655360 rows in 115.55s; chunk in 11.13s (5888 rows/s); 21:34251524
[vcf_to_zarr] 720896 rows in 127.02s; chunk in 11.47s (5714 rows/s); 21:36455104
[vcf_to_zarr] 786432 rows in 142.15s; chunk in 15.13s (4330 rows/s); 21:38563725
[vcf_to_zarr] 851968 rows in 153.81s; chunk in 11.65s (5623 rows/s); 21:40757642
[vcf_to_zarr] 917504 rows in 165.23s; chunk in 11.42s (5737 rows/s); 21:42768192
[vcf_to_zarr] 983040 rows in 179.12s; chunk in 13.89s (4717 rows/s); 21:44738104
[vcf_to_zarr] 1048576 rows in 191.46s; chunk in 12.34s (5309 rows/s); 21:46520145
[vcf_to_zarr] 1105538 rows in 201.12s; chunk in 9.66s (5898 rows/s)
[vcf_to_zarr] all done (5488 rows/s)
</code></pre></div></div>

<p>Note that the <code class="highlighter-rouge">vcf_path</code> has changed because I’m extracting from a different VCF file, but I’m using the same <code class="highlighter-rouge">zarr_path</code> as before because the data will be grouped by chromosome within the Zarr store.</p>

<p>Here’s the new data hierarchy after extracting data for Chromosome 21:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset_h1k</span><span class="o">.</span><span class="n">tree</span><span class="p">(</span><span class="n">expand</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span></code></pre></figure>

<link rel="stylesheet" href="./Extracting data from VCF files_files/style.min.css">
<div id="3f621278-8095-4c16-95d8-344b69f1a19e" class="zarr-tree jstree jstree-3 jstree-default" role="tree" aria-multiselectable="true" tabindex="0" aria-activedescendant="j3_1" aria-busy="false"><ul class="jstree-container-ul jstree-children" role="group"><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Group&quot;}" aria-selected="false" aria-level="1" aria-labelledby="j3_1_anchor" aria-expanded="true" id="j3_1" class="jstree-node  jstree-open jstree-last"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_1_anchor"><i class="jstree-icon jstree-themeicon fa fa-folder jstree-themeicon-custom" role="presentation"></i><span>/</span></a><ul role="group" class="jstree-children"><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Group&quot;}" aria-selected="false" aria-level="2" aria-labelledby="j3_2_anchor" aria-expanded="true" id="j3_2" class="jstree-node  jstree-open"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_2_anchor"><i class="jstree-icon jstree-themeicon fa fa-folder jstree-themeicon-custom" role="presentation"></i><span>21</span></a><ul role="group" class="jstree-children"><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Group&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j3_3_anchor" aria-expanded="true" id="j3_3" class="jstree-node  jstree-open"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_3_anchor"><i class="jstree-icon jstree-themeicon fa fa-folder jstree-themeicon-custom" role="presentation"></i><span>calldata</span></a><ul role="group" class="jstree-children"><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_4_anchor" id="j3_4" class="jstree-node  jstree-leaf jstree-last"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_4_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>GT (1105538, 2504, 2) int8</span></a></li></ul></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j3_5_anchor" id="j3_5" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_5_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>samples (2504,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Group&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j3_6_anchor" aria-expanded="true" id="j3_6" class="jstree-node  jstree-open jstree-last"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_6_anchor"><i class="jstree-icon jstree-themeicon fa fa-folder jstree-themeicon-custom" role="presentation"></i><span>variants</span></a><ul role="group" class="jstree-children"><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_7_anchor" id="j3_7" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_7_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>AA (1105538,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_8_anchor" id="j3_8" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_8_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>AC (1105538, 8) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_9_anchor" id="j3_9" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_9_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>AF (1105538, 8) float32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_10_anchor" id="j3_10" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_10_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>AFR_AF (1105538, 8) float32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_11_anchor" id="j3_11" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_11_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>ALT (1105538, 8) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_12_anchor" id="j3_12" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_12_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>AMR_AF (1105538, 8) float32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_13_anchor" id="j3_13" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_13_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>AN (1105538,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_14_anchor" id="j3_14" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_14_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>CHROM (1105538,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_15_anchor" id="j3_15" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_15_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>CIEND (1105538, 2) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_16_anchor" id="j3_16" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_16_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>CIPOS (1105538, 2) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_17_anchor" id="j3_17" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_17_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>CS (1105538,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_18_anchor" id="j3_18" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_18_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>DP (1105538,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_19_anchor" id="j3_19" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_19_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>EAS_AF (1105538, 8) float32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_20_anchor" id="j3_20" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_20_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>END (1105538,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_21_anchor" id="j3_21" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_21_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>EUR_AF (1105538, 8) float32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_22_anchor" id="j3_22" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_22_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>EX_TARGET (1105538,) bool</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_23_anchor" id="j3_23" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_23_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>FILTER_PASS (1105538,) bool</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_24_anchor" id="j3_24" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_24_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>ID (1105538,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_25_anchor" id="j3_25" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_25_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>IMPRECISE (1105538,) bool</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_26_anchor" id="j3_26" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_26_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>MC (1105538,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_27_anchor" id="j3_27" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_27_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>MEINFO (1105538, 4) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_28_anchor" id="j3_28" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_28_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>MEND (1105538,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_29_anchor" id="j3_29" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_29_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>MLEN (1105538,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_30_anchor" id="j3_30" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_30_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>MSTART (1105538,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_31_anchor" id="j3_31" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_31_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>MULTI_ALLELIC (1105538,) bool</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_32_anchor" id="j3_32" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_32_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>NS (1105538,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_33_anchor" id="j3_33" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_33_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>POS (1105538,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_34_anchor" id="j3_34" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_34_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>QUAL (1105538,) float32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_35_anchor" id="j3_35" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_35_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>REF (1105538,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_36_anchor" id="j3_36" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_36_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>SAS_AF (1105538, 8) float32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_37_anchor" id="j3_37" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_37_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>SVLEN (1105538,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_38_anchor" id="j3_38" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_38_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>SVTYPE (1105538,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_39_anchor" id="j3_39" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_39_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>TSD (1105538,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_40_anchor" id="j3_40" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_40_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>VT (1105538,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_41_anchor" id="j3_41" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_41_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>is_snp (1105538,) bool</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_42_anchor" id="j3_42" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_42_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>numalt (1105538,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_43_anchor" id="j3_43" class="jstree-node  jstree-leaf jstree-last"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_43_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>svlen (1105538, 8) int32</span></a></li></ul></li></ul></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Group&quot;}" aria-selected="false" aria-level="2" aria-labelledby="j3_44_anchor" aria-expanded="true" id="j3_44" class="jstree-node  jstree-open jstree-last"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_44_anchor"><i class="jstree-icon jstree-themeicon fa fa-folder jstree-themeicon-custom" role="presentation"></i><span>22</span></a><ul role="group" class="jstree-children"><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Group&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j3_45_anchor" aria-expanded="true" id="j3_45" class="jstree-node  jstree-open"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_45_anchor"><i class="jstree-icon jstree-themeicon fa fa-folder jstree-themeicon-custom" role="presentation"></i><span>calldata</span></a><ul role="group" class="jstree-children"><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_46_anchor" id="j3_46" class="jstree-node  jstree-leaf jstree-last"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_46_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>GT (1103547, 2504, 2) int8</span></a></li></ul></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j3_47_anchor" id="j3_47" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_47_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>samples (2504,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Group&quot;}" aria-selected="false" aria-level="3" aria-labelledby="j3_48_anchor" aria-expanded="true" id="j3_48" class="jstree-node  jstree-open jstree-last"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_48_anchor"><i class="jstree-icon jstree-themeicon fa fa-folder jstree-themeicon-custom" role="presentation"></i><span>variants</span></a><ul role="group" class="jstree-children"><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_49_anchor" id="j3_49" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_49_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>AA (1103547,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_50_anchor" id="j3_50" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_50_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>AC (1103547, 8) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_51_anchor" id="j3_51" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_51_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>AF (1103547, 8) float32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_52_anchor" id="j3_52" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_52_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>AFR_AF (1103547, 8) float32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_53_anchor" id="j3_53" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_53_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>ALT (1103547, 8) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_54_anchor" id="j3_54" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_54_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>AMR_AF (1103547, 8) float32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_55_anchor" id="j3_55" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_55_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>AN (1103547,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_56_anchor" id="j3_56" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_56_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>CHROM (1103547,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_57_anchor" id="j3_57" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_57_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>CIEND (1103547, 2) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_58_anchor" id="j3_58" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_58_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>CIPOS (1103547, 2) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_59_anchor" id="j3_59" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_59_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>CS (1103547,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_60_anchor" id="j3_60" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_60_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>DP (1103547,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_61_anchor" id="j3_61" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_61_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>EAS_AF (1103547, 8) float32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_62_anchor" id="j3_62" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_62_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>END (1103547,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_63_anchor" id="j3_63" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_63_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>EUR_AF (1103547, 8) float32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_64_anchor" id="j3_64" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_64_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>EX_TARGET (1103547,) bool</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_65_anchor" id="j3_65" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_65_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>FILTER_PASS (1103547,) bool</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_66_anchor" id="j3_66" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_66_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>ID (1103547,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_67_anchor" id="j3_67" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_67_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>IMPRECISE (1103547,) bool</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_68_anchor" id="j3_68" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_68_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>MC (1103547,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_69_anchor" id="j3_69" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_69_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>MEINFO (1103547, 4) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_70_anchor" id="j3_70" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_70_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>MEND (1103547,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_71_anchor" id="j3_71" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_71_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>MLEN (1103547,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_72_anchor" id="j3_72" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_72_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>MSTART (1103547,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_73_anchor" id="j3_73" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_73_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>MULTI_ALLELIC (1103547,) bool</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_74_anchor" id="j3_74" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_74_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>NS (1103547,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_75_anchor" id="j3_75" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_75_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>POS (1103547,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_76_anchor" id="j3_76" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_76_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>QUAL (1103547,) float32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_77_anchor" id="j3_77" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_77_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>REF (1103547,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_78_anchor" id="j3_78" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_78_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>SAS_AF (1103547, 8) float32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_79_anchor" id="j3_79" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_79_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>SVLEN (1103547,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_80_anchor" id="j3_80" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_80_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>SVTYPE (1103547,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_81_anchor" id="j3_81" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_81_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>TSD (1103547,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_82_anchor" id="j3_82" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_82_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>VT (1103547,) object</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_83_anchor" id="j3_83" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_83_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>is_snp (1103547,) bool</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_84_anchor" id="j3_84" class="jstree-node  jstree-leaf"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_84_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>numalt (1103547,) int32</span></a></li><li role="treeitem" data-jstree="{&quot;type&quot;: &quot;Array&quot;}" aria-selected="false" aria-level="4" aria-labelledby="j3_85_anchor" id="j3_85" class="jstree-node  jstree-leaf jstree-last"><i class="jstree-icon jstree-ocl" role="presentation"></i><a class="jstree-anchor" href="http://alimanfoo.github.io/2017/06/14/read-vcf.html#" tabindex="-1" id="j3_85_anchor"><i class="jstree-icon jstree-themeicon fa fa-table jstree-themeicon-custom" role="presentation"></i><span>svlen (1103547, 8) int32</span></a></li></ul></li></ul></li></ul></li></ul></div>
<script>
    if (!require.defined('jquery')) {
        require.config({
            paths: {
                jquery: '//cdnjs.cloudflare.com/ajax/libs/jquery/1.12.1/jquery.min'
            },
        });
    }
    if (!require.defined('jstree')) {
        require.config({
            paths: {
                jstree: '//cdnjs.cloudflare.com/ajax/libs/jstree/3.3.3/jstree.min'
            },
        });
    }
    require(['jstree'], function() {
        $('#3f621278-8095-4c16-95d8-344b69f1a19e').jstree({
            types: {
                Group: {
                    icon: "fa fa-folder"
                },
                Array: {
                    icon: "fa fa-table"
                }
            },
            plugins: ["types"]
        });
    });
</script>

<p>If you want to save time, you could run the extraction for each chromosome in parallel, it is fine to write to a Zarr store from multiple processes.</p>

<p>The 1000 genomes project has built a separate VCF file for each chromosome, but you may have a single VCF file with data for multiple chromosomes. In this case you can still group the data by chromosome in the Zarr output, but you need to use the <code class="highlighter-rouge">region</code> argument when doing the extraction, and the VCF file needs to be tabix indexed. E.g.:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">vcf_path</span> <span class="o">=</span> <span class="s">'/path/to/input.vcf.gz'</span>  <span class="c"># tabix-indexed VCF with data for multiple chromosomes</span>
<span class="n">zarr_path</span> <span class="o">=</span> <span class="s">'/path/to/output.zarr'</span>
<span class="n">chromosomes</span> <span class="o">=</span> <span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">23</span><span class="p">)]</span>
<span class="k">for</span> <span class="n">chrom</span> <span class="ow">in</span> <span class="n">chromosomes</span><span class="p">:</span>
    <span class="n">allel</span><span class="o">.</span><span class="n">vcf_to_zarr</span><span class="p">(</span><span class="n">vcf_path</span><span class="p">,</span> <span class="n">zarr_path</span><span class="p">,</span> <span class="n">group</span><span class="o">=</span><span class="n">chrom</span><span class="p">,</span> <span class="n">region</span><span class="o">=</span><span class="n">chrom</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>    </code></pre></figure>

<h2 id="post-script-snpeff-annotations">Post-script: SNPEFF annotations</h2>

<p>If you have a VCF with annotations from SNPEFF, you can post-process these to extract out data from within the ANN annotations. For example, here’s an example VCF with SNPEFF annotations:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'example_snpeff.vcf'</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##fileformat=VCFv4.1
##INFO=&lt;ID=AC,Number=A,Type=Integer,Description="Allele count in genotypes, for each ALT allele, in the same order as listed"&gt;
##FORMAT=&lt;ID=GT,Number=1,Type=String,Description="Genotype"&gt;
##SnpEffVersion="4.1b (build 2015-02-13), by Pablo Cingolani"
##SnpEffCmd="SnpEff  agam4.2 -noStats -lof - "
##INFO=&lt;ID=ANN,Number=.,Type=String,Description="Functional annotations: 'Allele | Annotation | Annotation_Impact | Gene_Name | Gene_ID | Feature_Type | Feature_ID | Transcript_BioType | Rank | HGVS.c | HGVS.p | cDNA.pos / cDNA.length | CDS.pos / CDS.length | AA.pos / AA.length | Distance | ERRORS / WARNINGS / INFO' "&gt;
#CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO
2L	103	.	C	T	53.36	.	AC=4;ANN=T|intergenic_region|MODIFIER|AGAP004677|AGAP004677|intergenic_region|AGAP004677||||||||3000|
2L	192	.	G	A	181.16	.	AC=8;
2L	13513722	.	A	T,G	284.06	PASS	AC=1;ANN=T|missense_variant|MODERATE|AGAP005273|AGAP005273|transcript|AGAP005273-RA|VectorBase|1/4|n.17A&gt;T|p.Asp6Val|17/4788|17/4788|6/1596||,G|synonymous_variant|LOW|AGAP005273|AGAP005273|transcript|AGAP005273-RA|VectorBase|1/4|n.17A&gt;G|p.Asp6Asp|12/4768|12/4768|4/1592||
</code></pre></div></div>

<p>The main thing to note is that the values of the ANN field contain multiple sub-fields. E.g., in the first variant, the ANN value is “<code class="highlighter-rouge">T|intergenic_region|MODIFIER|AGAP004677|AGAP004677|intergenic_region|AGAP004677||||||||3000|</code>”. The sub-fields are delimited by the pipe character (“<code class="highlighter-rouge">|</code>”). The first sub-field gives the allele to which the effect annotation applies (“T”); the second sub-field gives the effect annotation (“intergenic_region”); etc.</p>

<p>By default, scikit-allel parses the ANN field like any other string field, e.g.:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">read_vcf</span><span class="p">(</span><span class="s">'example_snpeff.vcf'</span><span class="p">,</span> <span class="n">fields</span><span class="o">=</span><span class="s">'ANN'</span><span class="p">)</span>
<span class="n">ann</span> <span class="o">=</span> <span class="n">callset</span><span class="p">[</span><span class="s">'variants/ANN'</span><span class="p">]</span>
<span class="n">ann</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([ 'T|intergenic_region|MODIFIER|AGAP004677|AGAP004677|intergenic_region|AGAP004677||||||||3000|',
       '',
       'T|missense_variant|MODERATE|AGAP005273|AGAP005273|transcript|AGAP005273-RA|VectorBase|1/4|n.17A&gt;T|p.Asp6Val|17/4788|17/4788|6/1596||'], dtype=object)
</code></pre></div></div>

<p>However, like this the data aren’t much use. If you want to access the sub-fields, scikit-allel provides a <strong>transformers</strong> parameter, which can be used like this:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">read_vcf</span><span class="p">(</span><span class="s">'example_snpeff.vcf'</span><span class="p">,</span> <span class="n">fields</span><span class="o">=</span><span class="s">'ANN'</span><span class="p">,</span> <span class="n">transformers</span><span class="o">=</span><span class="n">allel</span><span class="o">.</span><span class="n">ANNTransformer</span><span class="p">())</span>
<span class="nb">list</span><span class="p">(</span><span class="n">callset</span><span class="p">)</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>['variants/ANN_AA_length',
 'variants/ANN_AA_pos',
 'variants/ANN_Allele',
 'variants/ANN_Annotation',
 'variants/ANN_Annotation_Impact',
 'variants/ANN_CDS_length',
 'variants/ANN_CDS_pos',
 'variants/ANN_Distance',
 'variants/ANN_Feature_ID',
 'variants/ANN_Feature_Type',
 'variants/ANN_Gene_ID',
 'variants/ANN_Gene_Name',
 'variants/ANN_HGVS_c',
 'variants/ANN_HGVS_p',
 'variants/ANN_Rank',
 'variants/ANN_Transcript_BioType',
 'variants/ANN_cDNA_length',
 'variants/ANN_cDNA_pos']
</code></pre></div></div>

<p>Note that even though I only requested the “ANN” field, the resulting callset has a number of fields, each of which represents a sub-field from the ANN annotation. E.g.:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span><span class="p">[</span><span class="s">'variants/ANN_Allele'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array(['T', '', 'T'], dtype=object)
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span><span class="p">[</span><span class="s">'variants/ANN_Annotation'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array(['intergenic_region', '', 'missense_variant'], dtype=object)
</code></pre></div></div>

<p>You can also use the <strong>transformers</strong> parameter with other functions, e.g.:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">vcf_to_dataframe</span><span class="p">(</span><span class="s">'example_snpeff.vcf'</span><span class="p">,</span> <span class="n">fields</span><span class="o">=</span><span class="s">'ANN'</span><span class="p">,</span> <span class="n">transformers</span><span class="o">=</span><span class="n">allel</span><span class="o">.</span><span class="n">ANNTransformer</span><span class="p">())</span>
<span class="n">df</span></code></pre></figure>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>ANN_Allele</th>
      <th>ANN_Annotation</th>
      <th>ANN_Annotation_Impact</th>
      <th>ANN_Gene_Name</th>
      <th>ANN_Gene_ID</th>
      <th>ANN_Feature_Type</th>
      <th>ANN_Feature_ID</th>
      <th>ANN_Transcript_BioType</th>
      <th>ANN_Rank</th>
      <th>ANN_HGVS_c</th>
      <th>ANN_HGVS_p</th>
      <th>ANN_cDNA_pos</th>
      <th>ANN_cDNA_length</th>
      <th>ANN_CDS_pos</th>
      <th>ANN_CDS_length</th>
      <th>ANN_AA_pos</th>
      <th>ANN_AA_length</th>
      <th>ANN_Distance</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>T</td>
      <td>intergenic_region</td>
      <td>MODIFIER</td>
      <td>AGAP004677</td>
      <td>AGAP004677</td>
      <td>intergenic_region</td>
      <td>AGAP004677</td>
      <td></td>
      <td>-1</td>
      <td></td>
      <td></td>
      <td>-1</td>
      <td>-1</td>
      <td>-1</td>
      <td>-1</td>
      <td>-1</td>
      <td>-1</td>
      <td>3000</td>
    </tr>
    <tr>
      <th>1</th>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>-1</td>
      <td></td>
      <td></td>
      <td>-1</td>
      <td>-1</td>
      <td>-1</td>
      <td>-1</td>
      <td>-1</td>
      <td>-1</td>
      <td>-1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>T</td>
      <td>missense_variant</td>
      <td>MODERATE</td>
      <td>AGAP005273</td>
      <td>AGAP005273</td>
      <td>transcript</td>
      <td>AGAP005273-RA</td>
      <td>VectorBase</td>
      <td>1</td>
      <td>17A&gt;T</td>
      <td>Asp6Val</td>
      <td>17</td>
      <td>4788</td>
      <td>17</td>
      <td>4788</td>
      <td>6</td>
      <td>1596</td>
      <td>-1</td>
    </tr>
  </tbody>
</table>
</div>

<p>One thing to watch out for, some variants can have multiple SNPEFF annotations, i.e., there can be multiple values for the ANN annotation. This can happen if a variant has multiple alleles, or if a variant is within a gene that has multiple transcripts, or if a variant is within two overlapping genes (e.g., on opposite strands, or one gene within an intron of another), or if genes are closely spaced and so you get an upstream or downstream annotation for one gene and another annotation for the gene the variant is in, or some combination of any or all of these.</p>

<p>E.g., in the example above, the third variant has two alternate alleles, and therefore has two ANN values, and by default only the first value has been parsed. You can increase the number of values via the <strong>numbers</strong> parameter as usual, e.g.:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span> <span class="o">=</span> <span class="n">allel</span><span class="o">.</span><span class="n">read_vcf</span><span class="p">(</span><span class="s">'example_snpeff.vcf'</span><span class="p">,</span> <span class="n">fields</span><span class="o">=</span><span class="s">'ANN'</span><span class="p">,</span> <span class="n">numbers</span><span class="o">=</span><span class="p">{</span><span class="s">'ANN'</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
                         <span class="n">transformers</span><span class="o">=</span><span class="n">allel</span><span class="o">.</span><span class="n">ANNTransformer</span><span class="p">())</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span><span class="p">[</span><span class="s">'variants/ANN_Allele'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([['T', ''],
       ['', ''],
       ['T', 'G']], dtype=object)
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">callset</span><span class="p">[</span><span class="s">'variants/ANN_Annotation'</span><span class="p">]</span></code></pre></figure>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([['intergenic_region', ''],
       ['', ''],
       ['missense_variant', 'synonymous_variant']], dtype=object)
</code></pre></div></div>

<p>Dealing with multiple SNPEFF annotations can be tricky. FWIW my suggestion is, when generating the SNPEFF annotations, use the option to only call annotations against the canonical (longest) transcript for each gene, and disable upstream and downstream annotations. This will at least reduce some of the complexity, although you’ll still need to handle multiallelic variants and the odd case of overlapping genes.</p>

<h2 id="post-script-changes-from-vcfnp">Post-script: changes from <code class="highlighter-rouge">vcfnp</code></h2>

<p>The new functions available in <code class="highlighter-rouge">scikit-allel</code> supercede a package I previously wrote for extracting data from VCF files called <a href="http://alimanfoo.github.io/2017/06/14/@@TODO"><code class="highlighter-rouge">vcfnp</code></a>. I rewrote this functionality from the ground up and ported the functionality to <code class="highlighter-rouge">scikit-allel</code> for two main reasons. Firstly, <code class="highlighter-rouge">vcfnp</code> was slow and so you needed a cluster to parse big VCF files, which is obviously a pain. The new functions in <code class="highlighter-rouge">scikit-allel</code> should be up to ~40 times faster. Secondly, the <code class="highlighter-rouge">vcfnp</code> API was somewhat complicated, requiring three separate steps to get data from VCF into an HDF5 file or Zarr store. The new functions in <code class="highlighter-rouge">scikit-allel</code> hopefully simplify this process, enabling data to be extracted from VCF and loaded into any of a variety of storage containers via a single function call.</p>

<p>If you previously used <code class="highlighter-rouge">vcfnp</code> here are a few notes on some of the things that have changed.</p>

<ul>
  <li>No need for separate function calls to extract data from variants and calldata fields, both can be extracted via a single call to <code class="highlighter-rouge">read_vcf()</code> or any of the <code class="highlighter-rouge">vcf_to_...()</code> functions described above.</li>
  <li>Data can be extracted from VCF and loaded into HDF5 with a single function call to <code class="highlighter-rouge">vcf_to_hdf5()</code>; i.e., no need to first extract parts of the data out to .npy files then load into HDF5.</li>
  <li>No need to use a cluster or do any parallelisation, it should be possible to run <code class="highlighter-rouge">vcf_to_hdf5()</code> or <code class="highlighter-rouge">vcf_to_zarr()</code> on a whole VCF on a half-decent desktop or laptop computer, although big VCF files might take a couple of hours and require a reasonably large hard disk.</li>
  <li>The default NumPy data type for string fields has changed to use ‘object’ dtype, which means that strings of any length will be stored automatically (i.e., no need to configure separate dtypes for each string field) and there will be no truncation of long strings.</li>
  <li>Previously in <code class="highlighter-rouge">vcfnp</code> the genotype calls were extracted into a special field called ‘genotype’ separate from the ‘GT’ calldata field if requested. In <code class="highlighter-rouge">scikit-allel</code> the default behaviour is to parse the ‘GT’ field as a 3-dimensional integer array and return simply as ‘calldata/GT’. If you really want to process the ‘GT’ field as a string then you can override this by setting the type for ‘calldata/GT’ to ‘S3’ or ‘object’.</li>
  <li>The “arity” argument in <code class="highlighter-rouge">vcfnp</code> is instead called “numbers” in scikit-allel, to match better with the terminology used in VCF meta-information headers.</li>
  <li>Genotype ploidy is now specified via the “numbers” argument, there is no special “ploidy” argument.</li>
</ul>


  </article>

<div id="disqus_thread"><iframe id="dsq-app9445" name="dsq-app9445" allowtransparency="true" frameborder="0" scrolling="no" tabindex="0" title="Disqus" width="100%" src="./Extracting data from VCF files_files/saved_resource.html" style="width: 1px !important; min-width: 100% !important; border: none !important; overflow: hidden !important; height: 5799px !important;" horizontalscrolling="no" verticalscrolling="no"></iframe></div>
<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'alimanfoo'; // required: replace example with your forum shortname

    var disqus_config = function () {
        this.page.url = "http://alimanfoo.github.io/2017/06/14/read-vcf.html"; // <--- use canonical URL
        this.page.identifier = "/2017/06/14/read-vcf";
    };

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>


</div>

      </div>
    </div>

    <footer class="site-footer">

  <div class="wrapper">

    <div class="footer-col-wrapper">
      <div class="footer-col  footer-col-1">
        <ul class="contact-list">
          <li>Alistair Miles</li>
          <li><a href="mailto:alimanfoo@googlemail.com">alimanfoo@googlemail.com</a></li>
        </ul>
      </div>

      <div class="footer-col  footer-col-2">
        <ul class="social-media-list">
          
          <li>
            <a href="https://github.com/alimanfoo">
              <span class="icon  icon--github">
                <svg viewBox="0 0 16 16">
                  <path fill="#828282" d="M7.999,0.431c-4.285,0-7.76,3.474-7.76,7.761 c0,3.428,2.223,6.337,5.307,7.363c0.388,0.071,0.53-0.168,0.53-0.374c0-0.184-0.007-0.672-0.01-1.32 c-2.159,0.469-2.614-1.04-2.614-1.04c-0.353-0.896-0.862-1.135-0.862-1.135c-0.705-0.481,0.053-0.472,0.053-0.472 c0.779,0.055,1.189,0.8,1.189,0.8c0.692,1.186,1.816,0.843,2.258,0.645c0.071-0.502,0.271-0.843,0.493-1.037 C4.86,11.425,3.049,10.76,3.049,7.786c0-0.847,0.302-1.54,0.799-2.082C3.768,5.507,3.501,4.718,3.924,3.65 c0,0,0.652-0.209,2.134,0.796C6.677,4.273,7.34,4.187,8,4.184c0.659,0.003,1.323,0.089,1.943,0.261 c1.482-1.004,2.132-0.796,2.132-0.796c0.423,1.068,0.157,1.857,0.077,2.054c0.497,0.542,0.798,1.235,0.798,2.082 c0,2.981-1.814,3.637-3.543,3.829c0.279,0.24,0.527,0.713,0.527,1.437c0,1.037-0.01,1.874-0.01,2.129 c0,0.208,0.14,0.449,0.534,0.373c3.081-1.028,5.302-3.935,5.302-7.362C15.76,3.906,12.285,0.431,7.999,0.431z"></path>
                </svg>
              </span>

              <span class="username">alimanfoo</span>
            </a>
          </li>
          

          
          <li>
            <a href="https://twitter.com/alimanfoo">
              <span class="icon  icon--twitter">
                <svg viewBox="0 0 16 16">
                  <path fill="#828282" d="M15.969,3.058c-0.586,0.26-1.217,0.436-1.878,0.515c0.675-0.405,1.194-1.045,1.438-1.809
                  c-0.632,0.375-1.332,0.647-2.076,0.793c-0.596-0.636-1.446-1.033-2.387-1.033c-1.806,0-3.27,1.464-3.27,3.27 c0,0.256,0.029,0.506,0.085,0.745C5.163,5.404,2.753,4.102,1.14,2.124C0.859,2.607,0.698,3.168,0.698,3.767 c0,1.134,0.577,2.135,1.455,2.722C1.616,6.472,1.112,6.325,0.671,6.08c0,0.014,0,0.027,0,0.041c0,1.584,1.127,2.906,2.623,3.206 C3.02,9.402,2.731,9.442,2.433,9.442c-0.211,0-0.416-0.021-0.615-0.059c0.416,1.299,1.624,2.245,3.055,2.271 c-1.119,0.877-2.529,1.4-4.061,1.4c-0.264,0-0.524-0.015-0.78-0.046c1.447,0.928,3.166,1.469,5.013,1.469 c6.015,0,9.304-4.983,9.304-9.304c0-0.142-0.003-0.283-0.009-0.423C14.976,4.29,15.531,3.714,15.969,3.058z"></path>
                </svg>
              </span>

              <span class="username">alimanfoo</span>
            </a>
          </li>
          
        </ul>
      </div>

      <div class="footer-col  footer-col-3">
        <p><a rel="license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" style="border-width:0" src="./Extracting data from VCF files_files/88x31.png"></a> This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/3.0/">Creative Commons Attribution 3.0 Unported License</a>.</p>
      </div>
    </div>

  </div>

</footer>


  


<iframe style="display: none;" src="./Extracting data from VCF files_files/saved_resource(1).html"></iframe></body><span class="gr__tooltip"><span class="gr__tooltip-content"></span><i class="gr__tooltip-logo"></i><span class="gr__triangle"></span></span></html>